I'm making a browser based game to teach programming.
Here are the relevant files I have

//---File assetsDest\Level1\Level1.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fearless</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="../../resources/BaseStyle.css">
  <link rel="stylesheet" href="../../resources/RoundButtonsStyle.css">
    <link rel="stylesheet" href="../../resources/directInstructions/DirectInstructions.css">
  <script type="text/javascript" src="../../resources/BaseJs.js" defer></script>
    <script type="text/javascript" src="../../resources/directInstructions/DirectInstructions.js" defer></script>
</head>
<body data-next="../Level2/Level2.html">
<div class="gameArea">
<div id="screenOverlay"></div>
<div class="contentItem" id="content0" hidden>
<img class="img_16_9" src="Level1-01.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content1" hidden>
<img class="img_16_9" src="Level1-02.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content2" hidden>
<img class="img_16_9" src="Level1-03.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content3" hidden>
<img class="img_16_9" src="Level1-04.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content4" hidden>
<img class="img_16_9" src="Level1-05.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content5" hidden>
<img class="img_16_9" src="Level1-06.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content6" hidden>
<img class="img_16_9" src="Level1-07.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content7" hidden>
<img class="img_16_9" src="Level1-08.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content8" hidden>
<img class="img_16_9" src="Level1-09.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content9" hidden>
<img class="img_16_9" src="Level1-10.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content10" hidden>
<img class="img_16_9" src="Level1-11.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content11" hidden>
<img class="img_16_9" src="Level1-12.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:3.00%;width:45.00%;height:15.00%;"
name="Question_11_0"
data-solution="Hear:{}"
data-original=""
data-alternative=""
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content12" hidden>
<img class="img_16_9" src="Level1-13.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content13" hidden>
<img class="img_16_9" src="Level1-14.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:3.00%;width:45.00%;height:15.00%;"
name="Question_13_0"
data-solution="See:{}"
data-original=""
data-alternative=""
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content14" hidden>
<img class="img_16_9" src="Level1-15.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:33.00%;left:45.00%;width:53.00%;height:47.00%;"
name="Question_14_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}"
data-original="&#10;See:{}&#10;Hear:{}"
data-alternative="See:{}&#10;Hear:{}&#10;Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}|###|You have to complete the provided text, not add new one. In this case, you redeclared See and Hear|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;See:{}&#10;Hear:{}|###|You have to complete the provided text, not add new one. In this case, you redeclared See and Hear|###|See:Sense{}Hear:Sense{}|###|You also need to declare Sense"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content15" hidden>
<img class="img_16_9" src="Level1-16.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content16" hidden>
<img class="img_16_9" src="Level1-17.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content17" hidden>
<img class="img_16_9" src="Level1-18.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content18" hidden>
<img class="img_16_9" src="Level1-19.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content19" hidden>
<img class="img_16_9" src="Level1-20.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:1.00%;width:45.00%;height:70.00%;"
name="Question_19_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;North:{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}"
data-alternative="North:{}|###|Do not delete the existing code, just add and adapt|###|North:{}&#10;Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}|###|Add new code in provided empty lines or at the bottom|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;West:{}&#10;South:{}|###|Hold your horses, we are doing one direction at a time!"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content20" hidden>
<img class="img_16_9" src="Level1-21.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content21" hidden>
<img class="img_16_9" src="Level1-22.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content22" hidden>
<img class="img_16_9" src="Level1-23.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content23" hidden>
<img class="img_16_9" src="Level1-24.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content24" hidden>
<img class="img_16_9" src="Level1-25.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:1.00%;width:45.00%;height:70.00%;"
name="Question_24_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;West:{}&#10;South:{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;North:{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;West:{}&#10;South:{}|###|Forgot East|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;South:{}|###|Forgot West|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;West:{}|###|Forgot South"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content25" hidden>
<img class="img_16_9" src="Level1-26.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content26" hidden>
<img class="img_16_9" src="Level1-27.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:2.00%;left:55.00%;width:43.00%;height:83.00%;"
name="Question_26_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;West:{}&#10;South:{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}&#10;Direction:{}|###|Write Direction before North"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content27" hidden>
<img class="img_16_9" src="Level1-28.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:37.00%;left:1.00%;width:40.00%;height:53.00%;"
name="Question_27_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}|###|You forgot the comma! In this case that comma could indeed be omitted, but for now please write it down anyway|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{turn:Direction}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}|###|You forgot the initial dot (.)"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content28" hidden>
<img class="img_16_9" src="Level1-29.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content29" hidden>
<img class="img_16_9" src="Level1-30.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_29_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn,}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}|###|Add the result of turning!|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}|###|Add the result of turning!"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content30" hidden>
<img class="img_16_9" src="Level1-31.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_30_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{}|###|You forgot the comma! In this case that comma could indeed be omitted, but for now please write it down anyway|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{.turn-&gt;North,}&#10;South:Direction{.turn-&gt;West,}|###|Hold your horses, we are doing one direction at a time!"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content31" hidden>
<img class="img_16_9" src="Level1-32.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_31_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{.turn-&gt;West,}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{.turn-&gt;North,}&#10;South:Direction{}|###|You just assumed We asked to complete West, right? Read slowly and carefully! :-)|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{.turn-&gt;North,}&#10;South:Direction{.turn-&gt;West,}|###|Hold your horses, we are doing one direction at a time!"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content32" hidden>
<img class="img_16_9" src="Level1-33.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_32_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{.turn-&gt;North,}&#10;South:Direction{.turn-&gt;West,}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{.turn-&gt;West,}"
data-alternative=""
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content33" hidden>
<img class="img_16_9" src="Level1-34.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content34" hidden>
<img class="img_16_9" src="Level1-35.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content35" hidden>
<img class="img_16_9" src="Level1-36.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content36" hidden>
<img class="img_16_9" src="Level1-37.jpg" draggable="false"/>

</div>
<div class="itemColumn">  
  <div class="buttonContainer">
    <div class="roundBtn" data-tooltip="Go Back"><button id="prevBtn">«</button></div>
    <div class="roundBtn" data-tooltip="Next"><button id="nextBtn">»</button></div>
    <br>
    <div class="roundBtn" data-tooltip="Reset"><button id="resetBtn">⟳</button></div>
    <div class="roundBtn" data-tooltip="Hint"><button id="hintBtn">❓</button></div>
    </div>
  <div id="endButtonPlaceholder"></div>
  </div>
<div id="gameMessage" class="messageBox" style="display: none;"></div>
<div id="hintCharacter" class="panic" hidden>
  <img src="../../resources/panicPoint.png" class="panicImg" draggable="false">
  <div class="speechBubble"><p>Psst! Try the hint button!</p></div>
</div>
</div>
</body>
</html>

//---File assetsDest\Level2\Level2.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fearless</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="../../resources/BaseStyle.css">
  <link rel="stylesheet" href="../../resources/RoundButtonsStyle.css">
  <link rel="stylesheet" href="../../resources/walking/Walking.css">
  <script type="text/javascript" src="../../resources/BaseJs.js" defer></script>
  <script type="text/javascript" src="../../resources/walking/Question.js" defer></script>
  <script type="text/javascript" src="../../resources/walking/GameOptions.js" defer></script>
  <script type="text/javascript" src="../../resources/walking/Walking.js" defer></script>
</head>
<body data-required="33" data-next="../Level3/Level3.html">
  <div class="gameArea">
    <div id="screenOverlay"></div>
    <div class="topSection">

    <div class="topLeft">
<textarea class="overlayTextarea"
    id="question0"
    name="Question_0"
    data-original="/*
This is the walking minigame
Select all the code and press 'comment'.
Indeed, this code is a multiline comment.
Text useful for explanation but
ignored in execution.
*/"
    data-red="167"
    data-selectionstart="0"
    data-selectionend="171"
    data-option="7"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly hidden></textarea>
<textarea class="overlayTextarea"
    id="question1"
    name="Question_1"
    data-original="//This is a single line comment
"
    data-red="12"
    data-selectionstart="0"
    data-selectionend="31"
    data-option="7"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly hidden></textarea>
<textarea class="overlayTextarea"
    id="question2"
    name="Question_2"
    data-original="North
"
    data-red="2"
    data-selectionstart="0"
    data-selectionend="5"
    data-option="3"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly hidden></textarea>
<textarea class="overlayTextarea"
    id="question3"
    name="Question_3"
    data-original="+%/--%--"
    data-red="4"
    data-selectionstart="0"
    data-selectionend="8"
    data-option="8"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly hidden></textarea>
<textarea class="overlayTextarea"
    id="question4"
    name="Question_4"
    data-original="//Text +%/--%-- outside of comments
Just press error :-)
"
    data-red="121"
    data-selectionstart="110"
    data-selectionend="130"
    data-option="8"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly hidden></textarea>
<textarea class="overlayTextarea"
    id="question5"
    name="Question_5"
    data-original="//Ok, if you answer all correct, the
+%/--%--
"
    data-red="2"
    data-selectionstart="0"
    data-selectionend="36"
    data-option="7"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly hidden></textarea>
<textarea class="overlayTextarea"
    id="question6"
    name="Question_6"
    data-original="//Why the question before was a
+%/--%--
"
    data-red="2"
    data-selectionstart="0"
    data-selectionend="31"
    data-option="7"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly hidden></textarea>
<textarea class="overlayTextarea"
    id="question7"
    name="Question_7"
    data-original="//Ok, back to some questions.
East.turn
"
    data-red="59"
    data-selectionstart="55"
    data-selectionend="64"
    data-option="2"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly hidden></textarea>
      </div>
    <div class="topCenter">
    <div class="buttonRow">
        <div class="roundBtn" data-tooltip="Parameter">
      <button id="btnParameter"><span class="emoji">🏷️</span></button>
        </div>
    <span>parameter</span>
    </div>
      <div class="buttonRow">
    <div class="roundBtn" data-tooltip="Method Call">
      <button id="btnMethodCall"><span class="emoji">🏃🏾</span></button>
      </div>
    <span>method call</span>
    </div>
    <div class="buttonRow">
    <div class="roundBtn" data-tooltip="Object Literal">
      <button id="btnObjectLiteral"><span class="emoji">📦</span></button>
      </div>
    <span>object literal</span>
    </div>
    <div class="buttonRow">
    <div class="roundBtn" data-tooltip="Method declaration">
      <button id="btnMethodDeclaration"><span class="emoji">📝</span></button>
      </div>
    <span>method declaration</span>
    </div>
      <div class="buttonRow">
    <div class="roundBtn" data-tooltip="Type declaration">
      <button id="btnTypeDeclaration"><span class="emoji">📒</span></button>
      </div>
    <span>type declaration</span>
    </div>
      <div class="buttonRow">
    <div class="roundBtn" data-tooltip="Type">
      <button id="btnType"><span class="emoji">🧩</span></button>
      </div>
    <span>type</span>
    </div>
    <div class="buttonRow">
    <div class="roundBtn" data-tooltip="Comment">
      <button id="btnComment"><span class="emoji">💬</span></button>
      </div>
    <span>comment</span>
    </div>
      <div class="buttonRow">
    <div class="roundBtn" data-tooltip="Error">
      <button id="btnError"><span class="emoji">⚠️</span></button>
      </div>
    <span>error</span>
    </div>
      </div>

    <div class="topRight">
    <div class="scoreCounter">
        <div class="scoreDisplay">0</div>
    </div>
    <div class="scoreText">
    <p>current bonus: <span id="currentBonus">1</span></p>
        <p>current points: <span id="currentPoints">0</span></p>
        <p>required for next level: <span id="requiredPoints">25</span></p>
        </div>
      </div>
    
  </div>
    <div class="scrolling-background">
      <div class="back-layer"></div>
      <div class="character"></div>
      <div class="small-character"></div>
      <div class="front-layer"></div>
    </div>
  <div id="gameMessage" class="messageBox" style="display: none;"></div>
  </div>
</body>
</html>

//---File resources\BaseJs.js
const Deck= {
  list: (str) => {
    const res = [];
    for (let i= 0; true; i++) {
      const elem = document.getElementById(str + i);
      if (!elem) { return res; }
      res.push(elem);
      }
    },
  hideAll: (str) => Deck.list(str).forEach(c=>c.hidden = true),
  };
const MetaData= {
  str: (t, str) => {
    Utils.check(str === str.toLowerCase(),
      "metadata can not be case sensitive");
    return t.dataset[str];//.replace(/\\n/g, '\n');
    },
  int: (t, str) => parseInt(MetaData.str(t,str), 10),         
  };
const Log= {
  _currentStack: [],  // Safe for sync code due to JS single-threading
  tag: (name, fn) => (...args) => {
    Log._currentStack.push(name);
    try { return fn(...args); }
    finally { Log._currentStack.pop(); }
    },
  tagAsync: (name, fn) => (...args) => {
    if (Log._currentStack.length > 0){throw new Error(
      `Async handler "${name}" started with non-empty stack:
      [${Log._currentStack.join('->')}].
      This suggests a bug in the tag/tagAsync system.`);}
    Log._currentStack = [name];
    try { return fn(...args); }
    finally { Log._currentStack = []; }
    },
  log: (cond, msg) => {
    if (msg===undefined){ return Log.log(true,cond); }
    if (!cond){ return; }
    console.log(`${msg}\nTagStack: [${Log._currentStack.join('->')}]\n`);
    },
  };
const Utils= {
  error:(text) =>{
    alert(text);
    throw new Error(text);
    },
  checkExists:(value)=>{
    const err= value === null || value === undefined || Number.isNaN(value);
    if(!err){ return value; }
    Utils.error("Value does not exists");
    },
  check:(cond,text) =>{ if(!cond){ Utils.error(text); } },
  normalize: (text) => (' ' + text + ' ')
    .replace(/\s+(?=[^a-zA-Z0-9])/g, '') // Remove spaces before symbols
    .replace(/(?<=[^a-zA-Z0-9])\s+/g, '') // Remove spaces after symbols
    .replace(/\s+/g, ' ') // Collapse remaining spaces
    .trim(),
  
  showMessageBox: (message, timeOut, requireClick, freezeToken, callback) => {
    if (!timeOut){ timeOut= 1000; }
    const messageBox = document.getElementById('gameMessage');
    Utils.check(messageBox,"missing message box");
    messageBox.innerHTML = message;
    messageBox.style.display = 'block';
    const autoMsg= requireClick !== true;
    const t= freezeToken();
    const endMsg = Log.tag('MessageBoxCallBack', () => {
        messageBox.style.display = 'none';
        t.unfreeze();
        if (callback){ callback(); }
    });
    const timeOutF=autoMsg ? endMsg : ()=>messageBox.addEventListener('click', endMsg, { once: true });
    setTimeout(timeOutF, timeOut);
  },
  showNextLevelButton: (target, innerHTML, onClick ) => {
    if (!target){ return; }//Most times we want to show it and keep it shown
    const buttonContainer = document.createElement('div');
    buttonContainer.classList.add('roundBtn', 'nextLevelButton');
    const button = document.createElement('button');
    button.innerHTML = innerHTML;
    button.addEventListener('click', onClick);
    buttonContainer.appendChild(button);
    target.replaceWith(buttonContainer);
    return buttonContainer;
    },
  };
const initButtons = (updateContent,buttonActions) => {
  const freezeButtons = new Set();
  const freezeToken = () => {
    const token = {};
    freezeButtons.add(token);
    return { unfreeze: () => freezeButtons.delete(token) };
    };
  const freezeFor = time => {
    const token = {};
    freezeButtons.add(token);
    setTimeout(() => freezeButtons.delete(token), time);
    };
  const isFrozen = () => freezeButtons.size !== 0;
  document.querySelectorAll('button').forEach(button => {
  const bid = button.id;
  if (!bid){ return; }
  const action = buttonActions[bid];
  if (!action) {
    const txt= `No action defined for button with id: ${bid}`;
    alert(txt); throw new Error(txt);
    }
  button.addEventListener('click', ()=>{
      if (freezeButtons.size !== 0){ return; }
      action();
      updateContent();
      });
    });
  return {
    freezeFor:freezeFor,
    freezeToken: freezeToken,
    isFrozen: isFrozen,
    };
  };
const inactiveNudge= (isFrozenFun,initTime,initCallback) => {
  let timeoutId= null;
  let timeLimit= initTime;
  let onInactiveCallback= initCallback;
  const callback= ()=>{
    if(isFrozenFun()){ return; }
    onInactiveCallback();
    resetTimer();
    };
  const resetTimer= () => {
    if (timeoutId){ clearTimeout(timeoutId); }
    timeoutId = setTimeout(callback, timeLimit);
    };
  const startListening= () => {
    document.addEventListener("keydown", resetTimer, true);
    document.addEventListener("mousedown", resetTimer, true);
    document.addEventListener("touchstart", resetTimer, true);
    document.addEventListener("wheel", resetTimer, true);
    resetTimer();
    };
  startListening();
  return {
    setTimeLimit:(ms) => { timeLimit = ms; resetTimer(); },
    onInactive:(callback) => { onInactiveCallback = callback; },
    start: () => startListening(),
    stop: () => {
      clearTimeout(timeoutId);
      document.removeEventListener("keydown", resetTimer, true);
      document.removeEventListener("mousedown", resetTimer, true);
      document.removeEventListener("touchstart", resetTimer, true);
      document.removeEventListener("wheel", resetTimer, true);
      }
    };
  };
  
(()=>{
  const overlay = document.getElementById('screenOverlay');
  setTimeout(() => { 
    overlay.style.opacity = '0';      
    setTimeout(() => overlay.remove(), 3000);
      }, 0);
  })();
  
  


//---File resources\BaseStyle.css
* {
  margin: 0;
  padding: 0;
  border: 0;
  overflow: hidden;
  letter-spacing: inherit;
  word-spacing: inherit;
  font-size: inherit;
  font-weight: inherit;
  font-variant-ligatures: inherit;
  font-kerning: inherit;
  font-family: inherit;
  -webkit-font-smoothing: inherit;
  text-rendering: inherit;
  text-rendering: inherit;
  line-height: inherit;
  box-sizing: border-box;  
}
body {
  background-color: rgb(100, 100, 100);
  display: flex;
  justify-content: center;
  align-items: center;
}
.gameArea {
  --effective-width: min(100vw, 210vh);
  width: var(--effective-width);
  aspect-ratio: 2.1;
  position: relative;
  background-color: rgb(110, 110, 110);
  font-size: calc(var(--effective-width) * 0.03);
  font-family: 'Roboto', Arial, sans-serif;
  line-height: 1.2;
  letter-spacing: 0.03em;
  word-spacing: 0.1em;
  text-rendering: geometricPrecision;
  font-weight: 700;
  font-variant-ligatures: none;
  font-kerning: normal;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}


small{
  font-size: 0.5ex;
  display: inline-block;
  vertical-align: middle;
  line-height: normal;
  }
.img_16_9 {
  width: 100%;
  aspect-ratio: 16 / 9;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  }
.itemColumn {
  float: right;
  width: 15%;
  font-size: 1ex;
  padding-top: 5ex;
  overflow: visible;
  }
.contentItem {
  float: left;
  width: 85%;
  position: relative;
  }  
.messageBox {
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  position: absolute;
  top: 50%;
  left: 30%;
  transform: translate(-40%, -50%);
  background-color: rgba(10, 40, 40, 1);
  color: white;
  padding: 1ex;
  border-radius: 0.5ex;
  font-size: 1.2ex;
  text-align: center;
  white-space: normal;
  border: 0.2ex solid rgba(55, 255, 255, 1);
  box-shadow: 0ex 0ex 5ex rgba(255, 255, 255, 0.6);
  z-index: 5;
  }
.messageBox ul {
  margin: 1ex 0 0 1.5ex;
  padding: 0;
  list-style: disc;
  }
.messageBox hr {
  border: none;
  border-top: 1ex solid #ccc;
  margin: 1ex 0;
  }
.messageBox hr ~ * {
  opacity: 0;
  animation: fadeInAfterHR 1s forwards;
  animation-delay: 1.1s;
  }
@keyframes fadeInAfterHR {
  from { opacity: 0; }
  to { opacity: 1; }
  }

.overlayTextarea {
  font-size: 1.1ex;
  position: absolute;
  resize: none;
  border: 0.25ex solid rgb(170,170,170);
  padding: 0.45ex;
  line-height: 1.4;
  outline: none;
  color: rgb(5, 5, 5);
  overflow: hidden;
  white-space: pre;
  background: rgb(241, 231, 211);
  }

[hidden] {
  display: none;
  pointer-events: none;
  opacity: 0;
}

/* Initial black screen */
#screenOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  opacity: 1;
  z-index: 10;
  transition: opacity 6s ease-out;
  pointer-events: none;
}

.panic {
  overflow: visible;
  position: absolute;
  bottom: 55%;
  left: 80%;
  width: 15%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  pointer-events: none;
}
.panicImg { width: 100%; }
.speechBubble {
  position: absolute;
  top: 90%;
  left: -25%;
  background-color: rgba(250, 250, 210, 1);
  color: black;
  padding: 0.5ex 1ex;
  border-radius: 5ex;
  box-shadow: 0ex 0ex 2ex 1ex rgba(20, 20, 0, 0.8);
  
  font-size: 0.7ex;
  font-weight: bold;
  text-align: center;
  white-space: nowrap;
}

//---File resources\RoundButtonsStyle.css
.roundBtn, .roundBtn button, .buttonContainer{
  position: relative;
  overflow: visible;
  text-align: center;
  align-items: center;
  color: white;
  justify-content: center;
  }

.roundBtn button {
  background-image: radial-gradient(circle, rgba(150, 230, 150, 1) 20%, rgba(76, 175, 80, 1) 100%);
  border-radius: 50%;
  cursor: pointer;
  width: 3ex;
  height: 3ex;
  transition: transform 0.2s, box-shadow 0.3s;
  box-shadow: 0 1ex 1.5ex rgba(0, 0, 0, 0.3), 0 0.3ex 0.6ex rgba(0, 0, 0, 0.2);
  }
.roundBtn:not(.nextLevelButton):hover:not(:active)::after {  
  content: attr(data-tooltip);
  position: absolute;
  top: -3ex;
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(0, 0, 0, 1);
  padding: 0.2ex;
  border-radius: 0.3ex;
  white-space: nowrap;
  pointer-events: none;
  z-index: 3;
  animation: showTooltip 1s forwards;
}
@keyframes showTooltip {
  0% { opacity: 0; }
  50% { opacity: 0; }
  100% { opacity: 1; }
}
.roundBtn button:disabled, .roundBtn button:disabled:hover {
  background-image: radial-gradient(circle, rgba(210, 210, 210, 1) 20%, rgba(180, 180, 180, 1) 100%);
  cursor: not-allowed;
  box-shadow: 0 1ex 1.5ex rgba(0, 0, 0, 0.3), 0 0.3ex 0.6ex rgba(0, 0, 0, 0.2);
  transform: none;
}
.roundBtn button:hover {
  background-image: radial-gradient(circle, rgba(140, 210, 120, 1) 20%, rgba(69, 160, 73, 1) 100%);
  transform: translateY(-0.1ex);
  box-shadow: 0 1.5ex 2ex rgba(0, 0, 0, 0.4), 0 0.4ex 0.8ex rgba(0, 0, 0, 0.25);
}
.roundBtn button:active {
  background-image: radial-gradient(circle, rgba(100, 200, 100, 1) 20%, rgba(50, 150, 50, 1) 100%);
  box-shadow: 0 0.5ex 0.5ex rgba(0, 0, 0, 0.1);
  transform: translateY(0.1ex);
}
#resetBtn, #hintBtn {
  background-image: radial-gradient(circle, rgba(180, 200, 255, 1) 20%, rgba(102, 153, 255, 1) 100%);
}
#resetBtn:hover, #hintBtn:hover {
  background-image: radial-gradient(circle, rgba(170, 185, 250, 1) 20%, rgba(92, 138, 245, 1) 100%);
}
.buttonContainer {
  background-color: rgba(222, 184, 135, 1);
  border-radius: 2ex;
  padding: 0.5ex;
  box-shadow: 0 1.5ex 3ex rgba(0, 0, 0, 0.4);
  display: block;
  gap: 1ex;
  width: max-content;
  }

@keyframes nextLevelGlow {
    0% { box-shadow: 0 0 4ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
   50% { box-shadow: 0 0 6ex rgba(0, 255, 0, 1), 0 0 5ex rgba(0, 255, 0, 0.9), 0 0 8ex rgba(0, 255, 0, 0.8); }
  100% { box-shadow: 0 0 4ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
  }  
.nextLevelButton {
  font-size: 6.5ex;
  width: 7ex;
  height: 2.01ex;
  }
.nextLevelButton button {
  background-image: radial-gradient(circle, rgba(255, 223, 186, 1) 20%, rgba(255, 204, 128, 1) 100%);
  animation: nextLevelGlow 0.7s infinite alternate;
  }
.nextLevelButton button:hover {
  background-image: radial-gradient(circle, rgba(255, 215, 170, 1) 20%, rgba(255, 194, 102, 1) 100%); /* Slightly darker gold for hover */
  }
.roundBtn { display: inline-block; }
.buttonContainer br {
  display: block;
  margin-bottom: 0.4em;
  }

//---File resources\directInstructions\DirectInstructions.css
@keyframes correctGlowA {
    0% { box-shadow: 0 0 3ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
   50% { box-shadow: 0 0 5ex rgba(0, 255, 0, 1), 0 0 5ex rgba(0, 255, 0, 0.9), 0 0 8ex rgba(0, 255, 0, 0.8); }
  100% { box-shadow: 0 0 3ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
  }
@keyframes incorrectGlowA {
    0% { box-shadow: 0 0 3ex rgba(255, 165, 50, 1), 0 0 3ex rgba(255, 140, 0, 0.9), 0 0 5ex rgba(255, 120, 0, 0.8); }
   50% { box-shadow: 0 0 5ex rgba(255, 140,  0, 1), 0 0 5ex rgba(255, 100, 0, 0.9), 0 0 8ex rgba(255,  80, 0, 0.8); }
  100% { box-shadow: 0 0 3ex rgba(255, 165, 50, 1), 0 0 3ex rgba(255, 140, 0, 0.9), 0 0 5ex rgba(255, 120, 0, 0.8); }
  }
.correctGlow { animation: correctGlowA 0.7s infinite alternate; }
.incorrectGlow { animation: incorrectGlowA 0.7s infinite alternate; }

.customMessage {
  color: rgb(255, 140, 0);
  font-weight: bold;
  }

//---File resources\directInstructions\DirectInstructions.js
const initSlides = () => {
  let currentIndex = 0;
  const prev = document.getElementById('prevBtn');
  const next = document.getElementById('nextBtn');
  const nextLevelUrl = MetaData.str(document.body,'next');
  const maxIndex = (() => {
  let i = 0; 
    while (true) {
      const ci = document.getElementById('content' + i++);
    if (ci === null){return i - 2;}
      }
  })();
  const allTextArea = i =>
    Array.from(
      document.getElementById('content' + i)
      .querySelectorAll('textarea')
      );
  const updateContent = () => {
    Deck.hideAll('content');
    document
      .getElementById('content' + currentIndex)
      .hidden = false;
    prev.disabled = (currentIndex === 0);
    next.disabled = (currentIndex === maxIndex);
    if (next.disabled){ Utils.showNextLevelButton(
      document.getElementById('endButtonPlaceholder'),
      '<span class="emoji">🎉</span>',
      () => window.location.href = nextLevelUrl
      );}
    };
  const getAlternativePairs= (t)=>{
    const altStr= MetaData.str(t, 'alternative');
    if (!altStr){ return []; }
    const parts= altStr.split('|###|').map(part => part.trim());
    const pairs= [];
    for (let i= 0; i < parts.length; i += 2) {
      const altSolution= Utils.normalize(Utils.checkExists(parts[i]));
      const altMessage=  Utils.checkExists(parts[i + 1]);
      pairs.push({ altSolution, altMessage });
      }
    return pairs;
    }
  const defaultMsg= "Complete all the text to continue!";
  const checkSolutionTA= (t)=>{
    const userInput = Utils.normalize(t.value);
    const solution = Utils.normalize(MetaData.str(t, 'solution'));
    const alts= getAlternativePairs(t);
    if (userInput === solution){ return ""; }
    for (const { altSolution, altMessage } of alts){
      if (userInput === altSolution){ return altMessage; }
      }
    return defaultMsg;
    }
  const checkSolution= () => allTextArea(currentIndex)
    .map(checkSolutionTA).filter(s=>s !== "");
  const prevBtn= () => { if (currentIndex > 0){ currentIndex--; } };
  const showMessageBox= (msg)=> Utils.showMessageBox(`
    <div>
    <p style="font-size: 2.5ex; text-align: center;">
    <strong>${msg}</strong>
    </p>
    <hr>
    <p>Game explanation:</p>
    <ul>
      <li>🖊️ Complete the text area with the needed content.</li>
      <li>⟳ You can reset the text area to the original content by pressing the blue ⟳ button.</li>
      <li>❓ You can see a solution hint via the ❓ button.</li>
      <li>🎉 At the end, you can go to the next level by pressing on the symbol <span class="emoji">🎉</span>.</li>
    </ul>
    <hr>
    <p>☑️ Click here to make this message disappear</p>
    </div>
    `,0,true,Buttons.freezeToken,()=>{});
  const msgClass=(e)=> e === defaultMsg ? "" : 'class="customMessage"'; 
  const nextBtn= () => {
    const errs= checkSolution();
    if (errs.length === 0){ 
      if (currentIndex < maxIndex){ currentIndex++; }
      return;
      }
    let msg = errs
      .map(e => `<span ${msgClass(e)}>${e}</span>`)
      .join("<br>");
    return showMessageBox(msg);
    };
  const resetBtn = () => {
    const textAreas = allTextArea(currentIndex);
    textAreas.forEach(t => t.value = MetaData.str(t, 'original'));
    };
  const hintBtn = () => {
    const tas= allTextArea(currentIndex);
    if (tas.length === 0) { return; }
    Buttons.freezeFor(2000);
    tas.forEach(t => {
      t.disabled = true;
      t.dataset.tempValue = t.value;
      t.value = '';
      t.style.backgroundColor = 'rgba(196, 179, 167, 1)';
      });
    setTimeout(() => tas.forEach(t =>{
      t.value = MetaData.str(t, 'solution');
      }), 100);
    setTimeout(() => tas.forEach(t => {
      t.value = t.dataset.tempValue;
      t.disabled = false;
      t.style.backgroundColor = '';
      }), 1550);
    };
  const textInit= t =>{
    t.value = MetaData.str(t, 'original');
    t.addEventListener('input', () => {
      t.classList.remove("correctGlow", "incorrectGlow");
      let msg= checkSolutionTA(t);
      if (msg === defaultMsg){ return; }
      if (msg === "") { t.classList.add("correctGlow"); return; }
      t.classList.add("incorrectGlow");
      });
    };  
  for (let i= 0; i <= maxIndex; i++){ allTextArea(i).forEach(textInit); }
  updateContent();
  const Buttons = initButtons(updateContent,{nextBtn,prevBtn,resetBtn,hintBtn});
  const InactiveNudge= inactiveNudge(Buttons.isFrozen,30000,()=>{
    const tas= allTextArea(currentIndex);
    if (tas.length === 0) { return; }
    const hintChar = document.getElementById("hintCharacter");
    const speechBubble = hintChar.querySelector(".speechBubble");
    speechBubble.textContent = nextHint();
    hintChar.hidden = false;
    setTimeout(() => hintChar.hidden = true, 8000);
    });
  let messageIndex = 0;
  const hintMessages = [
    "Psst! Try the hint button",
    "It isn’t cheating. Try hints",
    "No shame in using hints",
    "Use hint! It won’t bite",
    "Do learning -- not struggling",
    ];
  const nextHint= ()=>{
    const res= hintMessages[messageIndex];
    messageIndex = (messageIndex + 1) % hintMessages.length;
    return res;
    };
  document.querySelectorAll('img')//force img preloading
    .forEach(img =>img.offsetHeight);
  };
initSlides();

//---File resources\walking\GameOptions.js
/*export*/ const OptionExplanations = {
  1: '<span class="emoji">🏷️</span> a parameter',
  2: '<span class="emoji">🏃🏾</span> a method call',
  3: '<span class="emoji">📦</span> an object literal',
  4: '<span class="emoji">📝</span> a method declaration',
  5: '<span class="emoji">📒</span> a type declaration',
  6: '<span class="emoji">📒</span> a type',
  7: '<span class="emoji">💬</span> a comment',
  8: '<span class="emoji">⚠️</span> an error',
};

//---File resources\walking\Question.js
/*export*/ const InitQuestions = (Buttons)=>
  _postInit(Deck.list('question')
    .map(q=>QuestionText(q,Buttons)));
    const _postInit = Log.tagAsync('postInit', (Questions) => {
  setTimeout(()=>_postInit(Questions),100);
  Questions.forEach((q)=>q.keepFocus());
  return Questions;
  });
const QuestionText = (q,Buttons) => {
  const redChar= MetaData.int(q, 'red');
  const requiredOption= MetaData.int(q, 'option');
  const startOk= MetaData.int(q, 'selectionstart');
  const endOk= MetaData.int(q, 'selectionend');
  const originalText= MetaData.str(q,'original');
  let startFix= redChar;
  let endFix= redChar + 1;
  const toSolution= ()=>{ startFix = startOk; endFix = endOk; };
  const toSingle= ()=>{ startFix = redChar; endFix = redChar + 1; };
  const isCorrectAnswer= (option)=>{
    const isErrorType= requiredOption === 8;
    const selectionOk= q.selectionStart === startOk && q.selectionEnd === endOk;
    return option === requiredOption && (isErrorType || selectionOk);
  };
  const active= Log.tag('active',(flag)=>{
    if(!flag){ q.hidden = true; return; }
    q.hidden = false;
    q.value = originalText;
    toSingle();
    highlight();
  });
  const highlightRange= Log.tag('highlightRange', (a, b)=>{
    Log.log(true, `Highlighting range ${startFix}-${endFix}`);
    setTimeout(() => { q.focus(); q.setSelectionRange(a, b); }, 0);
    return false;
    });
  const highlight= ()=> highlightRange(startFix, endFix);
  const selectionEvent= ()=>{
    Log.log(true,'selectionEvent for  '+q.id+' '+startFix+ '-'+endFix);
    if (Buttons.isFrozen()){ return highlight(); }
    const start= Number(q.selectionStart) || 0;
    const end= Number(q.selectionEnd) || 0;
    const included= start <= redChar && end > redChar;
    if (!included){ return highlight(); }
    Log.log(true,'no highlight for  '+q.id+' '+startFix+ '-'+endFix+' -- '+start+' '+end);
    return highlightRange(start,end);
    };
  const keepFocus= Log.tag('keepFocus',() => {
    if (q.hidden){ return; }
    if (document.activeElement === q){ return; }
    q.focus();
    selectionEvent();
    });
  const selectionEventMouse= Log.tag('userEvent:mouseUp',selectionEvent);
  q.addEventListener('mouseup', selectionEventMouse);
  q.addEventListener('keydown', (e) => e.preventDefault());
  return {
    toSolution,toSingle,isCorrectAnswer,active,
    keepFocus,selectionEvent,
    solved:false,requiredOption};
};

//---File resources\walking\Walking.js

const Walking= () => {
  const nextQuestion= Log.tag('nextQuestion', () => {
    if (streak === 0){streak = 1; }    
    const completed= questions.every(q => q.solved);
    if (completed){ questions.forEach(q => q.solved = false); }
    let i = (currentQuestionIndex + 1) % totalQuestions;
    while (questions[i].solved){ i = (i + 1) % totalQuestions; }
    currentQuestionIndex = i;
    questions.forEach(q => q.active(false));
    questions[currentQuestionIndex].active(true);
    updateContent();
    });
  const updateContent= Log.tag('updateContent',() => {
    requiredPointsElem.textContent = requiredPoints;
    resetAnimationSpeed();
    });
  const speedUp= ()=>{ streak = streak + 1; };
  const resetAnimationSpeed= () => {
    const speed= streak > 0 ? Math.pow(0.3981,streak) : 0;
    backLayer.style.animationDuration = (1000000 * speed + 's');
    frontLayer.style.animationDuration = (500000 * speed + 's');
    if (speed > 0){
      character.style.animationPlayState = 'running';
      smallCharacter.style.animationPlayState = 'running';
      character.style.animationDuration = ((1.5 + 50 * speed) + 's');
      smallCharacter.style.animationDuration = ((1.5 + 50 * speed) + 's');
      }
    else {
      character.style.animationPlayState = 'paused';
      smallCharacter.style.animationPlayState = 'paused';
      }
    };
  const showScoreAnimation= (increment) => {
    const incrementElem = document.createElement('span');
    incrementElem.classList.add('scoreIncrement');
    incrementElem.textContent = `+${increment}`;
    const scoreCounter = document.querySelector('.scoreCounter');
    scoreCounter.appendChild(incrementElem);
    setTimeout(() => incrementElem.remove(), 3000);
    setTimeout(() => scoreDisplayElem.textContent = score,1000);
    setTimeout(() => {    
      scoreDisplayElem.classList.add('animate-glow');
      setTimeout(() => scoreDisplayElem.classList.remove('animate-glow'), 3000);
      },500);
    };
  const showNextLevelButton= () => Utils.showNextLevelButton(
    document.querySelector('.scoreText'),
    '<span class="emoji">🎉</span>',
    () => window.location.href = nextLevelUrl
    );
  const handleCorrectAnswer= () => {
    questions[currentQuestionIndex].solved = streak > 0;
    score += increment();
    showScoreAnimation(increment());
    speedUp();
    currentBonusElem.textContent = increment();
    currentPointsElem.textContent = score;    
    if (score >= requiredPoints){ showNextLevelButton(); }
    };
  const handleIncorrectAnswer= Log.tag('handleIncorrectAnswer', (currentQuestion) => {
    streak = 0;
    currentBonusElem.textContent = 0;
    currentQuestion.toSolution();
    currentQuestion.selectionEvent();
    Buttons.freezeFor(4050);
    displayExplanationMessage(currentQuestion.requiredOption,()=>{
      questions.forEach(q => q.active(false));
      questions[currentQuestionIndex].active(true);
      updateContent();
      streak = 0;
      });
    });
  const displayExplanationMessage = (requiredOption, onDismiss) => {
    const explanation = OptionExplanations[requiredOption] || Utils.error('bad button id '+requiredOption);
    const msg =`
    <div>
      <p><strong>You stumble and fall.</strong></p>
    <p>See the text currently selected.</p>
    <p>The right button was "<strong>${explanation}</strong>".</p>
    <hr>
      <p>Minigame explanation:</p>
      <ul>
        <li>👀Look for the character selected in the code.</li>
        <li>🖱️Select the smallest cohesive amount of code around that character.</li>
        <li>☑️Click on the button corresponding to the kind of text you selected.</li>
        <li>🚨There is an error around the selected character? Just press "Error".</li>
      <li>🎲This puzzle is all about learning patterns via trial and error.</li>
      </ul>
    <hr>
    <p>☑️ Click here to make this message disappear</p>
    <p>🎉 At the end, you can go to the next level by pressing on the symbol <span class="emoji">🎉</span>.</p>
    </div>
    `;
    Utils.showMessageBox(msg, 4000, true, Buttons.freezeToken, onDismiss);
    };
  const increment= ()=>streak > 0 ? Math.pow(2, streak - 1) : 0;  
  const handleButtonClick = Log.tag('handleButtonClick', (option) => {
    Buttons.freezeFor(500);
    const currentQuestion = questions[currentQuestionIndex];
    const nope= !currentQuestion.isCorrectAnswer(option);
    if (nope){ handleIncorrectAnswer(currentQuestion); return; }
    handleCorrectAnswer();
    nextQuestion();
    });
  const buttonActions = {
    btnParameter: () => handleButtonClick(1),
    btnMethodCall: () => handleButtonClick(2),
    btnObjectLiteral: () => handleButtonClick(3),
    btnMethodDeclaration: () => handleButtonClick(4),
    btnTypeDeclaration: () => handleButtonClick(5),
    btnType: () => handleButtonClick(6),
    btnComment: () => handleButtonClick(7),
    btnError: () => handleButtonClick(8),
  };
  let currentQuestionIndex= 0;
  let score= 0;
  let streak= 1;
  const Buttons= initButtons(updateContent, buttonActions);
  Buttons.freezeFor(1500);
  const questions= InitQuestions(Buttons);
  const totalQuestions= questions.length;
  const currentPointsElem= document.getElementById('currentPoints');
  const currentBonusElem= document.getElementById('currentBonus');
  const requiredPoints= MetaData.int(document.body,'required');
  const nextLevelUrl= MetaData.str(document.body,'next');
  const requiredPointsElem= document.getElementById('requiredPoints');
  const scoreDisplayElem= document.querySelector('.scoreDisplay');
  const backLayer= document.querySelector('.back-layer');
  const frontLayer= document.querySelector('.front-layer');
  const character = document.querySelector('.character');
  const smallCharacter = document.querySelector('.small-character');
  questions.forEach(q => q.active(false));
  questions[currentQuestionIndex].active(true);
  updateContent();
  const animationTxt= 'scrollFrontBackground 1s linear infinite';
  window.addEventListener('resize', () => {
    backLayer.style.animation = 'none';
    frontLayer.style.animation = 'none';
    void backLayer.offsetWidth;
    void frontLayer.offsetWidth;
    backLayer.style.animation = animationTxt;
    frontLayer.style.animation = animationTxt;
    resetAnimationSpeed();
    });
  };
Walking();

//---File resources\walking\Walking.css
.topSection {
  position: relative;
  width: 100%;
  height: 59.99%;
  background-color: rgb(100, 100, 100);
  }
.topLeft {
  position: absolute;
  top: 0;
  left: 0;
  width: 50%;
  height: 100%;
  padding: 2ex;
  }
.topCenter {
  position: absolute;
  top: 0;
  left: 50%;
  width: 25%;
  height: 100%;
  padding: 2ex;
  display: flex;
  flex-direction: column;
  justify-content: center;
  font-size: 0.8ex;
  overflow: visible;
  }
.topRight {
  position: absolute;
  overflow: visible;
  top: 0;
  right: 0;
  width: 25%;
  height: 100%;
  padding: 2ex;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  font-size: 0.8ex;
}

.scrolling-background {
  width: 100%;
  height: 40%;
  position: relative;
  overflow: hidden;
}
.back-layer {
  width: 100%;
  height: 100%;
  background-image: url('back1.png');
  background-repeat: repeat-x;
  background-size: auto 100%;
  animation: scrollBackground 43200s linear infinite;
}
.character {
  width: 5ex;
  height: 10ex;
  background-image: url('side1.png');
  background-size: contain;
  background-repeat: no-repeat;
  position: absolute;
  bottom: -10%;
  left: 50%;
  transform: translate(-50%, 0);
  animation: characterMovement 30s cubic-bezier(0.42, 0, 0.58, 1) infinite alternate;
  z-index: 2;
}
.small-character {
  width: 5ex;
  height: 10ex;
  background-image: url('side2.png');
  background-size: contain;
  background-repeat: no-repeat;
  position: absolute;
  bottom: -25%;
  left: 60%;
  transform: translate(-50%, 0);
  animation: smallCharacterMovement 35s cubic-bezier(0.42, 0, 0.58, 1) infinite alternate;
  z-index: 2;
}
.front-layer {
  width: 100%;
  height: 100%;
  background-image: url('front1.png');
  background-repeat: repeat-x;
  background-size: auto 100%;
  position: absolute;
  top: 0;
  left: 0;
  animation: scrollFrontBackground 86400s linear infinite;
  z-index: 3;
}

@keyframes scrollBackground {
  from { background-position: 0 0; }
  to { background-position: -100000ex 0; }
}

@keyframes scrollFrontBackground {
  from { background-position: 0 0; }
  to { background-position: -500000ex 0; }
}

@keyframes characterMovement {
    0% { transform: translate(-50%,    0); }
   10% { transform: translate(-70%,  -3%); }
   20% { transform: translate(-40%,   5%); }
   30% { transform: translate(-75%,  -8%); }
   40% { transform: translate(-30%,  10%); }
   50% { transform: translate(-55%,    0); }
   60% { transform: translate(-80%,  -5%); }
   70% { transform: translate(-45%,   8%); }
   80% { transform: translate(-60%,   3%); }
   90% { transform: translate(-50%, -10%); }
  100% { transform: translate(-50%,    0); }
}

@keyframes smallCharacterMovement {
    0% { transform: translate(-50%,    0); }
   10% { transform: translate(-30%,   2%); }
   20% { transform: translate(-25%,  -4%); }
   30% { transform: translate(-70%,   6%); }
   40% { transform: translate(-40%,  -8%); }
   50% { transform: translate(-65%,    0); }
   60% { transform: translate(-35%,  10%); }
   70% { transform: translate(-55%,  -5%); }
   80% { transform: translate(-60%,   8%); }
   90% { transform: translate(-50%,  -6%); }
  100% { transform: translate(-50%,    0); }
}

.buttonRow {
  display: flex;
  align-items: center;
  margin-bottom: 1ex;
  overflow: visible;
}

.buttonRow button {
  margin-right: 1ex;
  font-size: 2.2ex;
}
.topLeft .overlayTextarea {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.roundBtn button .emoji{ filter: brightness(0.75) contrast(2.5); }

.roundBtn button {
  background-image: radial-gradient(circle, rgba(200, 180, 160, 1) 20%, rgba(230, 150, 100, 1) 100%);
}
.roundBtn button:hover {
  background-image: radial-gradient(circle, rgba(190, 170, 150, 1) 20%, rgba(220, 140, 90, 1) 100%);
}

.scoreCounter {
  position: relative;
  width: 15ex;
  height: 15ex;
  border-radius: 50%;
  background-color: rgb(200, 200, 200);
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 2ex;
  overflow: visible;
  }
.scoreText p {
  margin: 0.5ex 0;
  font-size: 1.5ex;
  }
.scoreDisplay {
  font-size: 5ex;
  font-weight: bold;
  padding: 0 0.5ex;
  border-radius: 3ex;
  }
.scoreDisplay.scoreIncrease {
  transform: scale(1.5);
  transition: transform 0.5s;
}
@keyframes scoreGlow {
    0% { transform: scale(1);   
     box-shadow: 0 0 1ex rgba(255, 215, 0, 0.5); background-color:rgba(255, 215, 0, 0.2); }
   50% { transform: scale(1.5);
       box-shadow: 0 0 2ex rgba(255, 215, 0, 1  ); background-color:rgba(255, 215, 0, 0.5  ); }
  100% { transform: scale(1);
       box-shadow: 0 0 1ex rgba(255, 215, 0, 0.5); background-color:rgba(255, 215, 0, 0.2); }
}
@keyframes floatUp {
    0% { opacity: 1; transform: translateY(    0) scale(1  ); }
  100% { opacity: 0; transform: translateY(-5ex) scale(1.5); }
}

.scoreDisplay.animate-glow { animation: scoreGlow 3s ease-out; }

.scoreIncrement {
  position: absolute;
  top: 0;
  left: 50%;
  transform: translate(-50%, 0) scale(1);
  font-size: 3ex;
  color: rgb(245, 205, 0);
  pointer-events: none;
  animation: floatUp 3s forwards, growIncrement 3s ease-in-out;
  opacity: 0;
}
@keyframes growIncrement {
    0% { transform: translate(-50%,     0) scale(1  ); }
   50% { transform: translate(-50%, -2ex) scale(2  ); }
  100% { transform: translate(-50%, -5ex) scale(1.5); }
}
@keyframes floatUp {
    0% { opacity: 1; transform: translate(-50%,     0) scale(1.5); }
  100% { opacity: 0; transform: translate(-50%, -5ex) scale(1.5); }
}

.messageBox {
  top: 50%;
  left: 49.5%;
  transform: translate(-0.5%, -50%);
  }
-------------------
As you can see, my formatting and coding style are quite peculiar.
I need that becuase I'm half blind and this style helps me to keep enough
code on screen so that I can reason about it.

Note how we only use percentage and ex, and we avoid px at all costs. This allows for the pages to be scalable.

Note how we consistenty use the html 'hidden' to make stuff appear and disappear.

As you can see, I"m also limiting my usage of Js to mostly fat arrows and FP style.
When suggesting more code, keep consitency with this style.

Style: only fat arrows, closure based objects, no use of 'this'.
Indentation: note the position of the closed curlies. This used to be called banner style.
if (cond){
  bbbb
  bbbb
  }//Yes: banner style
if (cond){
  bbbb
  bbbb
}//No: other style
Ifs: note how we often declare a const to store the condition with a descriptive name
That is:
--Bad version below:
const cond = ...;
if (cond){// If drop on slot:
  ..
  }//BAD CODE: using comment for describing behaviour
--Good version below:
const dropOnSlot = ...;
if (dropOnSlot){
  ..
  }//GOOD CODE: using variable name for describing behaviour
-----
note how we use curlies all of the times and we keep short ifs on one line (but with curlies)
We consistently add curlies on if-for-while bodies, but we omit any other kind of redundant curlies.

Compact code: always write the most compact and correct code possible.
For example, avoid code like "if (cond){ return true; } else { return false; }"

Normalized ifs:
  When possible, avoid if-else and favour if-return.
  To reduce indented parts of code, normalize the logic so that the
  if-return part is the shorter.

Normalized method form:
When possible, fit method bodies in one of those two cathegories:
- Simple delegation: this method can fit in one line
- guards,computation,result
  guards: at the start of the method we write a bunch of 'if-error' or 'if-return'
  to exclude cases where the code should not be called or the result is obvious.
  computation: this is the center part, here we can use some for/stream/while/loop
    however, keep it simple and delagate to another method if needed.
  result: this part computes the result using information produced in the computation.
    Note: it is perfectly fine to use early returns when more compact.
Use of spaces around '='.
We distinguish update "a = b" from initialization "a= b".
Thus,
const x= 3; //Good
const x = 3; //Bad: this is initialization
let x= 3;//Good, still initialization
if (cond){ x = 3; }//Good, this is update
----------------
In all the levels, the users are not seeing when the 'next level' button appear.
Can we do something to make it more clear?
As you can see, it has quite extreme glow, but this does not work because the eyes
of the player are looking to another part of the screen.
We already have an effect where the screen starts back and fades in,
Can we re use the same logic to make the screen go green for a moment or something like that?
What would encourage the players more?
