I'm making a browser based game to teach programming.
Here are the relevant files I have

//---File assetsDest\Level6\Level6.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fearless</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="../../resources/BaseStyle.css">
  <link rel="stylesheet" href="../../resources/RoundButtonsStyle.css">
  <link rel="stylesheet" href="../../resources/gather/Gather.css">
  <script type="text/javascript" src="../../resources/BaseJs.js" defer></script>
  <script type="text/javascript" src="../../resources/gather/CodeCard.js" defer></script>
  <script type="text/javascript" src="../../resources/gather/Gather.js" defer></script>

</head>
<body data-next="../Level7/Level7.html">
  <div class="gameArea" id="gameArea">
    <div id="screenOverlay"></div>
<div class="commonCode">
  <div class="cardCode">
    <textarea readonly class="overlayTextarea"
    autocomplete="off" spellcheck="false"
    autocorrect="off" autocapitalize="off">
Direction:{.turn:Direction,}
North:Direction {.turn->East,}
East:Direction{South}
South:Direction{West}
West:Direction{North}
    </textarea>
  </div>
</div>
<div id="cardDeck">
<div class="card" id="card_0"
data-card_id="0"
data-url="BrownM/BrownM1.png"
data-group="1"
>
<div class="cardTitle">North</div>
<img class="cardImage" src="../../resources/gather/images/BrownM/BrownM1.png" alt="Image" />
<div class="cardCode">
<textarea readonly class="overlayTextarea"
autocomplete="off" spellcheck="false"
autocorrect="off" autocapitalize="off">
North</textarea>
</div>
</div>

<div class="card" id="card_1"
data-card_id="1"
data-url="BrownM/BrownM2.png"
data-group="1"
>
<div class="cardTitle">North again?</div>
<img class="cardImage" src="../../resources/gather/images/BrownM/BrownM2.png" alt="Image" />
<div class="cardCode">
<textarea readonly class="overlayTextarea"
autocomplete="off" spellcheck="false"
autocorrect="off" autocapitalize="off">
North.turn.turn.turn.turn</textarea>
</div>
</div>

<div class="card" id="card_2"
data-card_id="2"
data-url="EggP/EggP1.png"
data-group="2"
>
<div class="cardTitle">Not north</div>
<img class="cardImage" src="../../resources/gather/images/EggP/EggP1.png" alt="Image" />
<div class="cardCode">
<textarea readonly class="overlayTextarea"
autocomplete="off" spellcheck="false"
autocorrect="off" autocapitalize="off">
North.turn</textarea>
</div>
</div>

<div class="card" id="card_3"
data-card_id="3"
data-url="BrownM/BrownM5.png"
data-group="0"
>
<div class="cardTitle">Starts with dot?</div>
<img class="cardImage" src="../../resources/gather/images/BrownM/BrownM5.png" alt="Image" />
<div class="cardCode">
<textarea readonly class="overlayTextarea"
autocomplete="off" spellcheck="false"
autocorrect="off" autocapitalize="off">
.turn East</textarea>
</div>
</div>

<div class="card" id="card_4"
data-card_id="4"
data-url="BrownM/BrownM3.png"
data-group="1"
>
<div class="cardTitle">Start East and turn</div>
<img class="cardImage" src="../../resources/gather/images/BrownM/BrownM3.png" alt="Image" />
<div class="cardCode">
<textarea readonly class="overlayTextarea"
autocomplete="off" spellcheck="false"
autocorrect="off" autocapitalize="off">
East.turn.turn.turn</textarea>
</div>
</div>

<div class="card" id="card_5"
data-card_id="5"
data-url="BrownM/BrownM7.png"
data-group="0"
>
<div class="cardTitle">Will this work?</div>
<img class="cardImage" src="../../resources/gather/images/BrownM/BrownM7.png" alt="Image" />
<div class="cardCode">
<textarea readonly class="overlayTextarea"
autocomplete="off" spellcheck="false"
autocorrect="off" autocapitalize="off">
East.turn{}</textarea>
</div>
</div>

<div class="card" id="card_6"
data-card_id="6"
data-url="BrownM/BrownM4.png"
data-group="1"
>
<div class="cardTitle">Empty () make no difference</div>
<img class="cardImage" src="../../resources/gather/images/BrownM/BrownM4.png" alt="Image" />
<div class="cardCode">
<textarea readonly class="overlayTextarea"
autocomplete="off" spellcheck="false"
autocorrect="off" autocapitalize="off">
East.turn().turn.turn</textarea>
</div>
</div>

<div class="card" id="card_7"
data-card_id="7"
data-url="EggP/EggP2.png"
data-group="2"
>
<div class="cardTitle">Clearly East</div>
<img class="cardImage" src="../../resources/gather/images/EggP/EggP2.png" alt="Image" />
<div class="cardCode">
<textarea readonly class="overlayTextarea"
autocomplete="off" spellcheck="false"
autocorrect="off" autocapitalize="off">
East</textarea>
</div>
</div>

<div class="card" id="card_8"
data-card_id="8"
data-url="BrownM/BrownM6.png"
data-group="0"
>
<div class="cardTitle">Turning from where?</div>
<img class="cardImage" src="../../resources/gather/images/BrownM/BrownM6.png" alt="Image" />
<div class="cardCode">
<textarea readonly class="overlayTextarea"
autocomplete="off" spellcheck="false"
autocorrect="off" autocapitalize="off">
Direction.turn</textarea>
</div>
</div>

</div>

    <div id="codeBaskets" class="noSelect">
      <div class="codeBasket" id="codeBasket_0">
        <div class="codeBasketTitle">Basket 0</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_0_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_0_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_0_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_0_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_0_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_0_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_0_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_0_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_0_8"></img>
          </div>
        </div>
      <div class="codeBasket" id="codeBasket_1">
        <div class="codeBasketTitle">Basket 1</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_1_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_1_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_1_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_1_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_1_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_1_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_1_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_1_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_1_8"></img>
          </div>
        </div>
      <div class="codeBasket" id="codeBasket_2">
        <div class="codeBasketTitle">Basket 2</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_2_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_2_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_2_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_2_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_2_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_2_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_2_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_2_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_2_8"></img>
          </div>
        </div>
      <div class="codeBasket" id="codeBasket_3">
        <div class="codeBasketTitle">Basket 3</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_3_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_3_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_3_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_3_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_3_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_3_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_3_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_3_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_3_8"></img>
          </div>
        </div>
      <div class="codeBasket" id="codeBasket_4">
        <div class="codeBasketTitle">Basket 4</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_4_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_4_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_4_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_4_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_4_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_4_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_4_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_4_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_4_8"></img>
          </div>
        </div>
      <div class="codeBasket" id="codeBasket_5">
        <div class="codeBasketTitle">Basket 5</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_5_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_5_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_5_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_5_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_5_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_5_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_5_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_5_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_5_8"></img>
          </div>
        </div>
      <div class="codeBasket" id="codeBasket_6">
        <div class="codeBasketTitle">Basket 6</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_6_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_6_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_6_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_6_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_6_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_6_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_6_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_6_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_6_8"></img>
          </div>
        </div>
      <div class="codeBasket" id="codeBasket_7">
        <div class="codeBasketTitle">Basket 7</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_7_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_7_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_7_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_7_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_7_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_7_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_7_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_7_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_7_8"></img>
          </div>
        </div>
      <div class="codeBasket" id="codeBasket_8">
        <div class="codeBasketTitle">Basket 8</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_8_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_8_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_8_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_8_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_8_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_8_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_8_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_8_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_8_8"></img>
          </div>
        </div>        
      <div class="codeBasket" id="codeBasketTrash">
        <div class="codeBasketTitle">Trash</div>
        <div class="codeBasketContent">
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_9_0"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_9_1"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_9_2"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_9_3"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_9_4"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_9_5"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_9_6"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_9_7"></img>
          <img src="../../resources/Empty.png" data-card_id="-1" class="basketSlot" id="basketSlot_9_8"></img>
          </div>
        </div>
      </div>
    <div id="dragDropImg" hidden></div>
    <div class="cardCode" id="mouseOverCodeBlock" hidden>
      <textarea readonly class="overlayTextarea"
        autocomplete="off" spellcheck="false"
        autocorrect="off" autocapitalize="off">
code here
on many lines!
        </textarea>
      </div>
    <div class="buttonContainer">
    <div class="roundBtn" data-tooltip="Check your work">
      <button id="submitBtn">🎉</button>
      </div>
    <div class="roundBtn" data-tooltip="Reset">
      <button id="resetBtn">⟳</button>
      </div>
    </div>
  <div id="hintCharacter" class="panic">
    <img src="../../resources/panicPoint.png" class="panicImg" draggable="false">
    <div class="speechBubble"><p>Show me an item for a hint!</p></div>
    </div>
  <div id="gameMessage" class="messageBox" style="display: none;"></div>
  </div>
</body>
</html>

//---File resources\BaseJs.js
const Deck= {
  list: (str) => {
    const res = [];
    for (let i= 0; true; i++) {
      const elem = document.getElementById(str + i);
      if (!elem) { return res; }
      res.push(elem);
      }
    },
  hideAll: (str) => Deck.list(str).forEach(c=>c.hidden = true),
  };
const MetaData= {
  str: (t, str) => {
    Utils.check(str === str.toLowerCase(),
      "metadata can not be case sensitive");
    return t.dataset[str];//.replace(/\\n/g, '\n');
    },
  int: (t, str) => parseInt(MetaData.str(t,str), 10),         
  };
const Log= {
  _currentStack: [],  // Safe for sync code due to JS single-threading
  tag: (name, fn) => (...args) => {
    Log._currentStack.push(name);
    try { return fn(...args); }
    finally { Log._currentStack.pop(); }
    },
  tagAsync: (name, fn) => (...args) => {
    if (Log._currentStack.length > 0){throw new Error(
      `Async handler "${name}" started with non-empty stack:
      [${Log._currentStack.join('->')}].
      This suggests a bug in the tag/tagAsync system.`);}
    Log._currentStack = [name];
    try { return fn(...args); }
    finally { Log._currentStack = []; }
    },
  log: (cond, msg) => {
    if (msg===undefined){ return Log.log(true,cond); }
    if (!cond){ return; }
    console.log(`${msg}\nTagStack: [${Log._currentStack.join('->')}]\n`);
    },
  };
const Utils= {
  error:(text) =>{
    alert(text);
    throw new Error(text);
    },
  checkExists:(value)=>{
    const err= value === null || value === undefined || Number.isNaN(value);
    if(!err){ return value; }
    Utils.error("Value does not exists");
    },
  check:(cond,text) =>{ if(!cond){ Utils.error(text); } },
  normalize: (text) => (' ' + text + ' ')
    .replace(/\s+(?=[^a-zA-Z0-9])/g, '') // Remove spaces before symbols
    .replace(/(?<=[^a-zA-Z0-9])\s+/g, '') // Remove spaces after symbols
    .replace(/\s+/g, ' ') // Collapse remaining spaces
    .trim(),
  
  showMessageBox: (message, timeOut, requireClick, freezeToken, callback) => {
    if (!timeOut){ timeOut= 1000; }
    const messageBox = document.getElementById('gameMessage');
    Utils.check(messageBox,"missing message box");
    messageBox.innerHTML = message;
    messageBox.style.display = 'block';
    const autoMsg= requireClick !== true;
    const t= freezeToken();
    const endMsg = Log.tag('MessageBoxCallBack', () => {
        messageBox.style.display = 'none';
        t.unfreeze();
        if (callback){ callback(); }
    });
    const timeOutF=autoMsg ? endMsg : ()=>messageBox.addEventListener('click', endMsg, { once: true });
    setTimeout(timeOutF, timeOut);
  },  
  flashGreen:()=> {
    const overlay = document.getElementById('screenOverlay').style;
    overlay.transition = 'none';
    overlay.backgroundColor = 'rgba(0,255,0,0.7)';
    void overlay.offsetWidth;
    overlay.animation = 'flashEffect 2s ease-out';
    }, 
  showNextLevelButton: (target, innerHTML, onClick ) => {
    if (!target){ return; }//Most times we want to show it and keep it shown
    Utils.flashGreen();
    const buttonContainer = document.createElement('div');
    buttonContainer.classList.add('roundBtn', 'nextLevelButton');
    const button = document.createElement('button');
    button.innerHTML = innerHTML;
    button.addEventListener('click', onClick);
    buttonContainer.appendChild(button);
    target.replaceWith(buttonContainer);
    return buttonContainer;
    },
  };
const initButtons = (updateContent,buttonActions) => {
  const freezeButtons = new Set();
  const freezeToken = () => {
    const token = {};
    freezeButtons.add(token);
    return { unfreeze: () => freezeButtons.delete(token) };
    };
  const freezeFor = time => {
    const token = {};
    freezeButtons.add(token);
    setTimeout(() => freezeButtons.delete(token), time);
    };
  const isFrozen = () => freezeButtons.size !== 0;
  document.querySelectorAll('button').forEach(button => {
  const bid = button.id;
  if (!bid){ return; }
  const action = buttonActions[bid];
  if (!action) {
    const txt= `No action defined for button with id: ${bid}`;
    alert(txt); throw new Error(txt);
    }
  button.addEventListener('click', ()=>{
      if (freezeButtons.size !== 0){ return; }
      action();
      updateContent();
      });
    });
  return {
    freezeFor:freezeFor,
    freezeToken: freezeToken,
    isFrozen: isFrozen,
    };
  };
const inactiveNudge= (isFrozenFun,initTime,initCallback) => {
  let timeoutId= null;
  let timeLimit= initTime;
  let onInactiveCallback= initCallback;
  const callback= ()=>{
    if(isFrozenFun()){ return; }
    onInactiveCallback();
    resetTimer();
    };
  const resetTimer= () => {
    if (timeoutId){ clearTimeout(timeoutId); }
    timeoutId = setTimeout(callback, timeLimit);
    };
  const startListening= () => {
    document.addEventListener("keydown", resetTimer, true);
    document.addEventListener("mousedown", resetTimer, true);
    document.addEventListener("touchstart", resetTimer, true);
    document.addEventListener("wheel", resetTimer, true);
    resetTimer();
    };
  startListening();
  return {
    setTimeLimit:(ms) => { timeLimit = ms; resetTimer(); },
    onInactive:(callback) => { onInactiveCallback = callback; },
    start: () => startListening(),
    stop: () => {
      clearTimeout(timeoutId);
      document.removeEventListener("keydown", resetTimer, true);
      document.removeEventListener("mousedown", resetTimer, true);
      document.removeEventListener("touchstart", resetTimer, true);
      document.removeEventListener("wheel", resetTimer, true);
      }
    };
  };
  
setTimeout(() => document.getElementById('screenOverlay')
  .style.opacity = '0', 0);
/*  (()=>{//old overkill, remember why
const overlay = document.getElementById('screenOverlay');
    setTimeout(() => { 
      overlay.style.opacity = '0';      
      setTimeout(() => overlay.style.opacity = '0', 3000);
        }, 0);
    })();
*/


//---File resources\BaseStyle.css
* {
  margin: 0;
  padding: 0;
  border: 0;
  overflow: hidden;
  letter-spacing: inherit;
  word-spacing: inherit;
  font-size: inherit;
  font-weight: inherit;
  font-variant-ligatures: inherit;
  font-kerning: inherit;
  font-family: inherit;
  -webkit-font-smoothing: inherit;
  text-rendering: inherit;
  text-rendering: inherit;
  line-height: inherit;
  box-sizing: border-box;  
}
body {
  background-color: rgb(100, 100, 100);
  display: flex;
  justify-content: center;
  align-items: center;
}
.gameArea {
  --effective-width: min(100vw, 210vh);
  width: var(--effective-width);
  aspect-ratio: 2.1;
  position: relative;
  background-color: rgb(110, 110, 110);
  font-size: calc(var(--effective-width) * 0.03);
  font-family: 'Roboto', Arial, sans-serif;
  line-height: 1.2;
  letter-spacing: 0.03em;
  word-spacing: 0.1em;
  text-rendering: geometricPrecision;
  font-weight: 700;
  font-variant-ligatures: none;
  font-kerning: normal;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}


small{
  font-size: 0.5ex;
  display: inline-block;
  vertical-align: middle;
  line-height: normal;
  }
.img_16_9 {
  width: 100%;
  aspect-ratio: 16 / 9;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  }
.itemColumn {
  float: right;
  width: 15%;
  font-size: 1ex;
  padding-top: 5ex;
  overflow: visible;
  }
.contentItem {
  float: left;
  width: 85%;
  position: relative;
  }  
.messageBox {
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  position: absolute;
  top: 50%;
  left: 30%;
  transform: translate(-40%, -50%);
  background-color: rgba(10, 40, 40, 1);
  color: white;
  padding: 1ex;
  border-radius: 0.5ex;
  font-size: 1.2ex;
  text-align: center;
  white-space: normal;
  border: 0.2ex solid rgba(55, 255, 255, 1);
  box-shadow: 0ex 0ex 5ex rgba(255, 255, 255, 0.6);
  z-index: 5;
  }
.messageBox ul {
  margin: 1ex 0 0 1.5ex;
  padding: 0;
  list-style: disc;
  }
.messageBox hr {
  border: none;
  border-top: 1ex solid #ccc;
  margin: 1ex 0;
  }
.messageBox hr ~ * {
  opacity: 0;
  animation: fadeInAfterHR 1s forwards;
  animation-delay: 1.1s;
  }
@keyframes fadeInAfterHR {
  from { opacity: 0; }
  to { opacity: 1; }
  }

.overlayTextarea {
  font-size: 1.1ex;
  position: absolute;
  resize: none;
  border: 0.25ex solid rgb(170,170,170);
  padding: 0.45ex;
  line-height: 1.4;
  outline: none;
  color: rgb(5, 5, 5);
  overflow: hidden;
  white-space: pre;
  background: rgb(241, 231, 211);
  }

[hidden] {
  display: none;
  pointer-events: none;
  opacity: 0;
}

/* Initial black screen */
#screenOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  opacity: 1;
  z-index: 10;
  transition: opacity 6s ease-out;
  pointer-events: none;
  }
@keyframes flashEffect {
  0% { opacity: 0; }
  10% { opacity: 1; }
  100% { opacity: 0; }
  }

.panic {
  overflow: visible;
  position: absolute;
  bottom: 55%;
  left: 80%;
  width: 15%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  /*pointer-events: none; for now*/
}
.panicImg { width: 100%; }
.speechBubble {
  position: absolute;
  top: 90%;
  left: -25%;
  background-color: rgba(250, 250, 210, 1);
  color: black;
  padding: 0.5ex 1ex;
  border-radius: 5ex;
  box-shadow: 0ex 0ex 2ex 1ex rgba(20, 20, 0, 0.8);
  
  font-size: 0.7ex;
  font-weight: bold;
  text-align: center;
  white-space: nowrap;
}

//---File resources\RoundButtonsStyle.css
.roundBtn, .roundBtn button, .buttonContainer{
  position: relative;
  overflow: visible;
  text-align: center;
  align-items: center;
  color: white;
  justify-content: center;
  }

.roundBtn button {
  background-image: radial-gradient(circle, rgba(150, 230, 150, 1) 20%, rgba(76, 175, 80, 1) 100%);
  border-radius: 50%;
  cursor: pointer;
  width: 3ex;
  height: 3ex;
  transition: transform 0.2s, box-shadow 0.3s;
  box-shadow: 0 1ex 1.5ex rgba(0, 0, 0, 0.3), 0 0.3ex 0.6ex rgba(0, 0, 0, 0.2);
  }
.roundBtn:not(.nextLevelButton):hover:not(:active)::after {  
  content: attr(data-tooltip);
  position: absolute;
  top: -3ex;
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(0, 0, 0, 1);
  padding: 0.2ex;
  border-radius: 0.3ex;
  white-space: nowrap;
  pointer-events: none;
  z-index: 3;
  animation: showTooltip 1s forwards;
}
@keyframes showTooltip {
  0% { opacity: 0; }
  50% { opacity: 0; }
  100% { opacity: 1; }
}
.roundBtn button:disabled, .roundBtn button:disabled:hover {
  background-image: radial-gradient(circle, rgba(210, 210, 210, 1) 20%, rgba(180, 180, 180, 1) 100%);
  cursor: not-allowed;
  box-shadow: 0 1ex 1.5ex rgba(0, 0, 0, 0.3), 0 0.3ex 0.6ex rgba(0, 0, 0, 0.2);
  transform: none;
}
.roundBtn button:hover {
  background-image: radial-gradient(circle, rgba(140, 210, 120, 1) 20%, rgba(69, 160, 73, 1) 100%);
  transform: translateY(-0.1ex);
  box-shadow: 0 1.5ex 2ex rgba(0, 0, 0, 0.4), 0 0.4ex 0.8ex rgba(0, 0, 0, 0.25);
}
.roundBtn button:active {
  background-image: radial-gradient(circle, rgba(100, 200, 100, 1) 20%, rgba(50, 150, 50, 1) 100%);
  box-shadow: 0 0.5ex 0.5ex rgba(0, 0, 0, 0.1);
  transform: translateY(0.1ex);
}
#resetBtn, #hintBtn {
  background-image: radial-gradient(circle, rgba(180, 200, 255, 1) 20%, rgba(102, 153, 255, 1) 100%);
}
#resetBtn:hover, #hintBtn:hover {
  background-image: radial-gradient(circle, rgba(170, 185, 250, 1) 20%, rgba(92, 138, 245, 1) 100%);
}
.buttonContainer {
  background-color: rgba(222, 184, 135, 1);
  border-radius: 2ex;
  padding: 0.5ex;
  box-shadow: 0 1.5ex 3ex rgba(0, 0, 0, 0.4);
  display: block;
  gap: 1ex;
  width: max-content;
  }

@keyframes nextLevelGlow {
    0% { box-shadow: 0 0 4ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
   50% { box-shadow: 0 0 6ex rgba(0, 255, 0, 1), 0 0 5ex rgba(0, 255, 0, 0.9), 0 0 8ex rgba(0, 255, 0, 0.8); }
  100% { box-shadow: 0 0 4ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
  }  
.nextLevelButton {
  font-size: 6.5ex;
  width: 7ex;
  height: 2.01ex;
  }
.nextLevelButton button {
  background-image: radial-gradient(circle, rgba(255, 223, 186, 1) 20%, rgba(255, 204, 128, 1) 100%);
  animation: nextLevelGlow 0.7s infinite alternate;
  }
.nextLevelButton button:hover {
  background-image: radial-gradient(circle, rgba(255, 215, 170, 1) 20%, rgba(255, 194, 102, 1) 100%); /* Slightly darker gold for hover */
  }
.roundBtn { display: inline-block; }
.buttonContainer br {
  display: block;
  margin-bottom: 0.4em;
  }

//---File resources\walking\GameOptions.js
/*export*/ const OptionExplanations = {
  1: '<span class="emoji">🏷️</span> a parameter',
  2: '<span class="emoji">🏃🏾</span> a method call',
  3: '<span class="emoji">📦</span> an object literal',
  4: '<span class="emoji">📝</span> a method declaration',
  5: '<span class="emoji">📒</span> a type declaration',
  6: '<span class="emoji">📒</span> a type',
  7: '<span class="emoji">💬</span> a comment',
  8: '<span class="emoji">⚠️</span> an error',
};

//---File resources\gather\Gather.js
const CheckSolution= (freezeToken,allCards)=>{
  const getBasketIds= (id)=>Deck
    .list('basketSlot_'+id+'_')
    .map(q=>MetaData.int(q,'card_id'))
    .filter(cid=>cid !== -1);
  const allBaskets=  [0,1,2,3,4,5,6,7,8];//except trash basket
  const usedBaskets= allBaskets
    .map(bid=>getBasketIds(bid))
    .filter(ids=>ids.length > 0);
  const groups= ids=>ids.map(allCards.groupOf);
  const noTrashIn= ids=>groups(ids).every(n=>n !== 0);
  const onlyTrashIn= ids=>groups(ids).every(n=>n === 0);
  const allSameIn= ids=>new Set(groups(ids)).size === 1;
  const getSameIn= ids=>Utils.checkExists(new Set(groups(ids)).values().next().value);
  const uniqueGroups= new Set(usedBaskets.map(getSameIn));
  const allBasketsAreUnique= uniqueGroups.size == usedBaskets.length; 
  const allCardsUsed= allCards.cards().length === 0;
  const trashCount = usedBaskets.filter(b => !noTrashIn(b)).length;
  const noTrash= trashCount === 0;
  const onlyTrash= onlyTrashIn(getBasketIds(9));
  const allSame= usedBaskets.every(allSameIn);

  const explanation=(() => {
    if(!allCardsUsed){ return "You have not yet collected all the items."; }
    if (!noTrash){   return "Not all poisonous items are in the trash.<BR>"+trashCount+" toxic code outside the trash."; }
    if (!onlyTrash){ return "Some good items ended up in the trash."; }
    if (!allSame){   return "Some baskets contain items of different kinds."; }
    if (!allBasketsAreUnique){ return "Some items of the same kind are split across baskets.<BR>There are "+uniqueGroups.size+" unique groups but you used "+usedBaskets.length+" baskets"; }
    return "";
    })();
  const msg= `
    <div>
    <p><strong>Items not well sorted. Try again!</strong></p>
    <p><strong style="color: rgb(254, 80, 80);">${explanation}</strong></p>
    <hr>
    <p>Minigame explanation:</p>
    <ul>
      <li>📦 The top-left area contains code shared by all snippets.</li>       
      <li>🖱️🔄 Drag and drop code snippets to organize them.</li>
      <li>🧺 Group code that does the same thing in the same basket.</li>
      <li>🔀 Code that does different things goes into different baskets. 🧺</li>
      <li>🚨 Broken or non-compiling code? Put it in the trash basket.🗑️</li>
      <li>🤔 Think logically to succeed! </li>
      <li>🌱You can try as many times as you like.</li>
      </ul>
    <hr>
    <p>☑️ Click here to make this message disappear</p>
    </div>
    `;
  const nextLevelUrl = MetaData.str(document.body, 'next');
  Utils.checkExists(nextLevelUrl);
  if (explanation.length == 0){ window.location.href = nextLevelUrl; return; }
  Utils.showMessageBox(msg, 1000, true, freezeToken,()=>{});
  };
  
  
const Gather= Log.tagAsync('Gather', () => {
  const codeBaskets = document.getElementById('codeBaskets');
  const mouseOverCodeBlock = document.getElementById('mouseOverCodeBlock');
  const allSlots = Array.from(codeBaskets.querySelectorAll('.basketSlot'));

  const isOverSlot= (x, y) => {
    const elements= document.elementsFromPoint(x, y);
    const slot= elements
      .find(el => el.classList && el.classList.contains('basketSlot'));
    return slot || null;
    };
  const isOverDeck = (x, y) => {
    const deckRect = cardDeck.getBoundingClientRect();
    const cond = (x >= deckRect.left && x <= deckRect.right && y >= deckRect.top && y <= deckRect.bottom);
    return cond;
    };
  const emptySlotItem= {cardId:-1, imgUrl:''};
  const getSlotItem = slot => {
    const cardId = MetaData.int(slot,'card_id');

    const imgUrl = slot.src; 
    return { cardId, imgUrl };
    };
  const setSlotItem = (slot, item) => {
    slot.dataset.card_id = '' + item.cardId;
    const okUrl= item.imgUrl && item.imgUrl.includes('/images/');
    if (okUrl) { slot.src = item.imgUrl;}
    else { slot.src= "../../resources/Empty.png"; }
    };
 
  const slotDropItem = (x, y, draggedItem, srcSlot) => {
    const destSlot = isOverSlot(x, y);
    const dropOnDeck = isOverDeck(x, y);
    const dropOnSlot = !!destSlot;
    if (!dropOnSlot && !dropOnDeck){ setSlotItem(srcSlot, draggedItem); return; }
    if(dropOnDeck){ allCards.push(draggedItem.cardId); return; }
    const existingItem = getSlotItem(destSlot);
    setSlotItem(srcSlot, existingItem);
    setSlotItem(destSlot, draggedItem);
    };
  const dropEvent= (e,card)=>{
    const slot = isOverSlot(e.clientX,e.clientY);
    if (!slot){ return -2; }
    slot.src = card.imgUrl();
    const oldId= MetaData.int(slot,'card_id');
    slot.dataset.card_id = `${card.cardId()}`;
    console.log(`Placed card ${slot.dataset.card_id} in slot ${slot.id}`);
    return oldId;
    };
  const isFrozen= ()=>Buttons.isFrozen();//to solve circular dep Buttons<->Dragging
  const Dragging= initDragging(isFrozen);
  const allCards= CodeCards(Dragging,dropEvent);
  const slotMouseDown= srcSlot => Dragging.makeMouseDown(ee => {
    const draggedItem = getSlotItem(srcSlot);
    setSlotItem(srcSlot, emptySlotItem);
    Dragging.setMouseUp(draggedItem.cardId,e => slotDropItem(e.clientX, e.clientY, draggedItem, srcSlot));
    return draggedItem.imgUrl;
    });
  allSlots.forEach(s => s.addEventListener('mousedown', slotMouseDown(s)));

  const slotMouseEnter= (e) => {
    if(Buttons.isFrozen()){ return; }
    const slot = e.currentTarget;
    const cardId = MetaData.int(slot,'card_id');
    const noCard = cardId === -1;
    mouseOverCodeBlock.hidden = noCard;
    if(noCard){ return; }
    const code= allCards.codeOf(cardId);
    mouseOverCodeBlock.querySelector('textarea').value = code;
    };
  const slotMouseLeave= (e)=>{ mouseOverCodeBlock.hidden = true; };
  allSlots.forEach(s => {
    s.addEventListener('mouseenter', slotMouseEnter);
    s.addEventListener('mouseleave', slotMouseLeave);
    });
  Utils.check(allCards.cards().length!==0,"No cards in init")
  const submitBtn= e=>CheckSolution(Buttons.freezeToken,allCards);
  const buttonActions = {
    submitBtn,
    resetBtn: () => location.reload()
    };
  const Buttons= initButtons(() => {}, buttonActions);
  
  
  const hintChar = document.getElementById("hintCharacter");
  const speechBubble = hintChar.querySelector(".speechBubble");
  hintChar.addEventListener('mouseover', ()=>{
    if (!Dragging.isDragging()){ return; }
    const cardId = Dragging.draggedElem();    
    const group = allCards.groupOf(cardId)
    speechBubble.textContent = 'aaa'+group;
    });
  hintChar.addEventListener('mouseout', ()=>{
    speechBubble.textContent = 'bbb';//allCards.groupOf(card.cardId())
    });
  });

Gather();
/*
TODO:
bug for finish 
block drag/drop (mouse down) if button frozen
just remove all selection all over everywhere all the time

*/

//---File resources\gather\CodeCard.js
/*export*/ const initDragging = (isFrozen)=> {
  const dragDropImg= document.getElementById('dragDropImg');
  const gameArea = document.getElementById('gameArea');
  let dragging= false;
  let draggingE= null;
  const mouseMove = Log.tag('mouseMove', e => {
    if (!dragging){ return; }
    const half= dragDropImg.getBoundingClientRect().width/2;
    const mouseX= e.clientX - (gameArea.getBoundingClientRect().left+half);
    const mouseY= e.clientY - (gameArea.getBoundingClientRect().top+half);
    dragDropImg.style.left = `${mouseX}px`;
    dragDropImg.style.top =  `${mouseY}px`;
    });
  const draggedElem=()=>{
    if (!dragging){ return null; }
    return draggingE;
    }
  const makeMouseDown= f => e =>{
    if (isFrozen()){ return; }
    if (dragging){ return; }
    dragging = true;
    window.getSelection().removeAllRanges();
    document.body.classList.add('noSelect');      
    const newImg = document.createElement('img');
    newImg.src = f(e);
    newImg.style.width = '100%';
    newImg.style.height = 'auto';
    newImg.setAttribute('draggable', 'false');// Disable native chrome drag      
    dragDropImg.appendChild(newImg);
    dragDropImg.hidden = false;
    mouseMove(e);
    };
  let currentMouseUpCont=e=>{};
  const setMouseUp= (e,f)=>{ currentMouseUpCont = f; draggingE = e; };
  const mouseUp= e => {
    if (!dragging){ return; }
    dragging = false;
    document.body.classList.remove('noSelect');
    dragDropImg.hidden = true;
    dragDropImg.innerHTML = '';
    currentMouseUpCont(e);
    };
  document.addEventListener('mousemove', mouseMove);
  document.addEventListener('mouseup', mouseUp);
  document.querySelectorAll('img')//avoid browser specific img drag stuff
    .forEach(img => img.setAttribute('draggable', 'false'));
  return {
    isDragging:()=>dragging,
    makeMouseDown,setMouseUp,draggedElem,
    }
  };
/*export*/ const CodeCards = (Dragging, dropEvent)=> {
  const update= ()=> cards.forEach((c,index)=>c.active(index === 0));
  const pop= () => {
    if (cards.length === 0){ return; }
    cards[0].active(false);
    cards.shift();
    update();
    };
  const push= (id) => {
    const elem= document.getElementById('card_'+id);
    cards.unshift(CodeCard(elem,mouseDownF)); 
    update();
    };
  const mouseDownF= Dragging.makeMouseDown((e)=>{
    cards[0].drag();
    Dragging.setMouseUp(cards[0].cardId(),mouseUpF);
    return cards[0].imgUrl();
    });
  const mouseUpF = e => {
    const oldId= dropEvent(e,cards[0]);
    cards[0].undrag();
    if (oldId==-2){ return; }//no slot
    pop();
    if (oldId==-1){ return; }//new slot
    push(oldId);
    Dragging.setMouseUp(null,ee => {});
    };
  const cards= Deck.list('card_').map(q=>CodeCard(q,mouseDownF));
  Utils.check(cards.length!==0,"No cards in init")
  const codeOf= (i)=>{
    const textArea = document
      .getElementById('card_'+i).querySelector('textarea');
    Utils.checkExists(textArea);
    return textArea.value;
    };
  const groupOf= (i)=>{
    Utils.checkExists(i);
    const q= document.getElementById('card_'+i);
    Utils.checkExists(q);
    return MetaData.int(q, 'group');
    };
  update();
  return {pop,push,
    cards:()=>cards,
    get:(i)=> cards[i],
    codeOf,
    groupOf,
    };
  };
const CodeCard = (q,mouseDown) => {
  const cardId= MetaData.int(q,'card_id');
  const imgUrl= "../../resources/gather/images/"
    + MetaData.str(q, 'url');
  const group = MetaData.int(q, 'group');//0 is trash
  const drag= ()=> q.classList.add('draggingCard');
  const undrag= ()=> q.classList.remove('draggingCard');
  const active= (flag)=>{ q.hidden = !flag };
  q.addEventListener('mousedown', mouseDown);
  return {
    active, cardId:()=>cardId,
    group:()=>group, imgUrl:()=>imgUrl,
    drag, undrag
    };
  };

//---File resources\gather\Gather.css
#codeBaskets {
  width: 65%;
  height: 63%;
  display: flex;
  flex-wrap: wrap;
  background-color: lightgray;
  position: absolute;
  bottom: 0;
  left: 0;
  font-size: 0.8ex;
}
.codeBasket {
  width: 20%;
  height: 50%;
  background-image: url('../../resources/gather/images/Basket/Basket.png');
  background-size: cover;
  background-repeat: no-repeat;
  background-position: -1.5ex 3ex;
  display: flex;
  flex-direction: column;
  box-sizing: border-box;
  border: 0.1ex solid white;
}

.codeBasketTitle {
  height: 15%;
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  color: black;
  border-bottom: 0.1ex solid white;
}
.codeBasketContent{
  height: 90%;
  width: 100%;
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 1fr);
  gap: 0.5ex;
  padding: 0.5ex;
  box-sizing: border-box;
}
.codeBasketContent img { border: 0.05ex solid black; }

.basketSlot {
  position: relative;
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
}
#codeBasketTrash{
  background-image: url('../../resources/gather/images/Basket/TrashBasket.png');
  }
#cardDeck {
  position: absolute;
  top: 0;
  right: 0;
  width: 50%;
  height: 35%;
  background-color: rgba(0, 0, 0, 0.1);
  display: flex;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  }
.card:not([hidden]) {
  display: grid;
  grid-template-columns: 1fr 2.25fr;
  grid-template-rows: 10% 1fr;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: blueviolet;
  box-sizing: border-box;
  }
.cardTitle {
  font-size: 0.9ex;
  grid-column: 1 / -1;
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgb(241, 196, 15);
  color: white;
  box-sizing: border-box;
}
.cardImage{
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: rgb(23, 161, 65);
  box-sizing: border-box;
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
  user-select: none;
  pointer-events: none;
}
.cardCode {
  position: relative;
  font-size: 1.3ex;  
  }
.disableSelection {/*where is needed?*/
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  }
#mouseOverCodeBlock {
  position: absolute;
  top: 36%;
  left: 65.5%;
  width: 34.5%;
  height: 35%;
  box-sizing: border-box;
  background-color: rgb(223, 72, 16);
  }
.commonCode {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr;
  position: absolute;
  top: 0.5%;
  left: 0.5%;
  width: 47%;
  height: 34%;
  background-color: rgb(155, 155, 155);
  font-size: 1.8ex;
  }
.buttonContainer {/* Adds to the common style to place them */
  position: absolute;
  bottom: 0;
  right: 11%;
  }
.overlayTextarea {/* Adds to the common style to size it 100% */
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  }
.draggingCard{
  filter: grayscale(80%);
  transition: filter 0.3s;        
  }
#dragDropImg {
  width: 5%;
  z-index: 99;
  height: auto;
  position: absolute;
  pointer-events: none;
  }

.panic {/*override from BaseStyle*/
  bottom: -2%;
  left: 84%;
}
.speechBubble {/*override from BaseStyle*/
  top: 10%;
  left: -25%;
}
    
.noSelect { user-select: none; }
-------------------
As you can see, my formatting and coding style are quite peculiar.
I need that becuase I'm half blind and this style helps me to keep enough
code on screen so that I can reason about it.

Note how we only use percentage and ex, and we avoid px at all costs. This allows for the pages to be scalable.

Note how we consistenty use the html 'hidden' to make stuff appear and disappear.

As you can see, I"m also limiting my usage of Js to mostly fat arrows and FP style.
When suggesting more code, keep consitency with this style.

Style: only fat arrows, closure based objects, no use of 'this'.
Indentation: note the position of the closed curlies. This used to be called banner style.
if (cond){
  bbbb
  bbbb
  }//Yes: banner style
if (cond){
  bbbb
  bbbb
}//No: other style
Ifs: note how we often declare a const to store the condition with a descriptive name
That is:
--Bad version below:
const cond = ...;
if (cond){// If drop on slot:
  ..
  }//BAD CODE: using comment for describing behaviour
--Good version below:
const dropOnSlot = ...;
if (dropOnSlot){
  ..
  }//GOOD CODE: using variable name for describing behaviour
-----
note how we use curlies all of the times and we keep short ifs on one line (but with curlies)
We consistently add curlies on if-for-while bodies, but we omit any other kind of redundant curlies.

Compact code: always write the most compact and correct code possible.
For example, avoid code like "if (cond){ return true; } else { return false; }"

Normalized ifs:
  When possible, avoid if-else and favour if-return.
  To reduce indented parts of code, normalize the logic so that the
  if-return part is the shorter.

Normalized method form:
When possible, fit method bodies in one of those two cathegories:
- Simple delegation: this method can fit in one line
- guards,computation,result
  guards: at the start of the method we write a bunch of 'if-error' or 'if-return'
  to exclude cases where the code should not be called or the result is obvious.
  computation: this is the center part, here we can use some for/stream/while/loop
    however, keep it simple and delagate to another method if needed.
  result: this part computes the result using information produced in the computation.
    Note: it is perfectly fine to use early returns when more compact.
Use of spaces around '='.
We distinguish update "a = b" from initialization "a= b".
Thus,
const x= 3; //Good
const x = 3; //Bad: this is initialization
let x= 3;//Good, still initialization
if (cond){ x = 3; }//Good, this is update
----------------
I'm focusing on adding the hint.
As you can see, there is a character on the bottom right, with a speach bubble.
I would like to add a mouseover event so that if we are currently dragging,
the text bubble changes giving information on the image (the group)
