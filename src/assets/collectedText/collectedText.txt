I'm making a browser based game to teach programming.
Here are the relevant files I have

//---File assetsDest\Level1\Level1.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fearless</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="../../resources/BaseStyle.css">
  <link rel="stylesheet" href="../../resources/RoundButtonsStyle.css">
    <link rel="stylesheet" href="../../resources/directInstructions/DirectInstructions.css">
  <script type="text/javascript" src="../../resources/BaseJs.js" defer></script>
    <script type="text/javascript" src="../../resources/directInstructions/DirectInstructions.js" defer></script>
</head>
<body data-next="../Level2/Level2.html">
<div class="gameArea">
<div id="screenOverlay"></div>
<div class="contentItem" id="content0" hidden>
<img class="img_16_9" src="Level1-01.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content1" hidden>
<img class="img_16_9" src="Level1-02.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content2" hidden>
<img class="img_16_9" src="Level1-03.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content3" hidden>
<img class="img_16_9" src="Level1-04.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content4" hidden>
<img class="img_16_9" src="Level1-05.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content5" hidden>
<img class="img_16_9" src="Level1-06.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content6" hidden>
<img class="img_16_9" src="Level1-07.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content7" hidden>
<img class="img_16_9" src="Level1-08.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content8" hidden>
<img class="img_16_9" src="Level1-09.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content9" hidden>
<img class="img_16_9" src="Level1-10.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content10" hidden>
<img class="img_16_9" src="Level1-11.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content11" hidden>
<img class="img_16_9" src="Level1-12.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:3.00%;width:45.00%;height:15.00%;"
name="Question_11_0"
data-solution="Hear:{}"
data-original=""
data-alternative=""
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content12" hidden>
<img class="img_16_9" src="Level1-13.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content13" hidden>
<img class="img_16_9" src="Level1-14.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:3.00%;width:45.00%;height:15.00%;"
name="Question_13_0"
data-solution="See:{}"
data-original=""
data-alternative=""
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content14" hidden>
<img class="img_16_9" src="Level1-15.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:33.00%;left:45.00%;width:53.00%;height:47.00%;"
name="Question_14_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}"
data-original="&#10;See:{}&#10;Hear:{}"
data-alternative="See:{}&#10;Hear:{}&#10;Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}|###|You have to complete the provided text, not add new one. In this case, you redeclared See and Hear|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;See:{}&#10;Hear:{}|###|You have to complete the provided text, not add new one. In this case, you redeclared See and Hear|###|See:Sense{}Hear:Sense{}|###|You also need to declare Sense"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content15" hidden>
<img class="img_16_9" src="Level1-16.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content16" hidden>
<img class="img_16_9" src="Level1-17.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content17" hidden>
<img class="img_16_9" src="Level1-18.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content18" hidden>
<img class="img_16_9" src="Level1-19.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content19" hidden>
<img class="img_16_9" src="Level1-20.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:1.00%;width:45.00%;height:70.00%;"
name="Question_19_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;North:{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}"
data-alternative="|###|Do not delete the existing code, just add and adapt. Use reset to get the provided code back|###|North:{}|###|Do not delete the existing code, just add and adapt|###|North:{}&#10;Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}|###|Add new code in provided empty lines or at the bottom|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;West:{}&#10;South:{}|###|Hold your horses, we are doing one direction at a time!"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content20" hidden>
<img class="img_16_9" src="Level1-21.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content21" hidden>
<img class="img_16_9" src="Level1-22.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content22" hidden>
<img class="img_16_9" src="Level1-23.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content23" hidden>
<img class="img_16_9" src="Level1-24.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content24" hidden>
<img class="img_16_9" src="Level1-25.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:1.00%;width:45.00%;height:70.00%;"
name="Question_24_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;West:{}&#10;South:{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;North:{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}|###|Add also West and South!|###|East:{}&#10;Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}|###|Add at the bottom!|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;West:{}&#10;South:{}|###|Forgot East|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;South:{}|###|Forgot West|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;West:{}|###|Forgot South"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content25" hidden>
<img class="img_16_9" src="Level1-26.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content26" hidden>
<img class="img_16_9" src="Level1-27.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:2.00%;left:55.00%;width:43.00%;height:83.00%;"
name="Question_26_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;&#10;North:{}&#10;East:{}&#10;West:{}&#10;South:{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}&#10;Direction:{}|###|Write Direction before North"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content27" hidden>
<img class="img_16_9" src="Level1-28.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:37.00%;left:1.00%;width:40.00%;height:53.00%;"
name="Question_27_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}|###|You forgot the comma! In this case that comma could indeed be omitted, but for now please write it down anyway|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{turn:Direction}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}|###|You forgot the initial dot (.)|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}&#10;.turn:Direction,|###|Declare the method BETWEEN the curly {..}|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}&#10;.turn:Direction|###|Declare the method BETWEEN the curly {..}|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}&#10;.turn|###|Declare the method BETWEEN the curly {..}|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}&#10;turn|###|Declare the method BETWEEN the curly {..}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content28" hidden>
<img class="img_16_9" src="Level1-29.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content29" hidden>
<img class="img_16_9" src="Level1-30.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_29_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn,}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}|###|Add the result of turning!|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}|###|Add the result of turning!"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content30" hidden>
<img class="img_16_9" src="Level1-31.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_30_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{}&#10;West:Direction{}&#10;South:Direction{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{}|###|You forgot the comma! In this case that comma could indeed be omitted, but for now please write it down anyway|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{.turn-&gt;North,}&#10;South:Direction{.turn-&gt;West,}|###|Hold your horses, we are doing one direction at a time!"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content31" hidden>
<img class="img_16_9" src="Level1-32.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_31_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{.turn-&gt;West,}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{}"
data-alternative="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{.turn-&gt;North,}&#10;South:Direction{}|###|You just assumed We asked to complete West, right? Read slowly and carefully! :-)|###|Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{.turn-&gt;North,}&#10;South:Direction{.turn-&gt;West,}|###|Hold your horses, we are doing one direction at a time!"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content32" hidden>
<img class="img_16_9" src="Level1-33.jpg" draggable="false"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_32_0"
data-solution="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{.turn-&gt;North,}&#10;South:Direction{.turn-&gt;West,}"
data-original="Sense:{}&#10;See:Sense{}&#10;Hear:Sense{}&#10;Direction:{.turn:Direction,}&#10;North:Direction{.turn-&gt;East,}&#10;East:Direction{.turn-&gt;South,}&#10;West:Direction{}&#10;South:Direction{.turn-&gt;West,}"
data-alternative=""
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content33" hidden>
<img class="img_16_9" src="Level1-34.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content34" hidden>
<img class="img_16_9" src="Level1-35.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content35" hidden>
<img class="img_16_9" src="Level1-36.jpg" draggable="false"/>

</div>
<div class="contentItem" id="content36" hidden>
<img class="img_16_9" src="Level1-37.jpg" draggable="false"/>

</div>
<div class="itemColumn">  
  <div class="buttonContainer">
    <div class="roundBtn" data-tooltip="Go Back"><button id="prevBtn">«</button></div>
    <div class="roundBtn" data-tooltip="Next"><button id="nextBtn">»</button></div>
    <br>
    <div class="roundBtn" data-tooltip="Reset"><button id="resetBtn">⟳</button></div>
    <div class="roundBtn" data-tooltip="Hint"><button id="hintBtn">❓</button></div>
    </div>
  <div id="endButtonPlaceholder"></div>
  </div>
<div id="gameMessage" class="messageBox" style="display: none;"></div>
<div id="hintCharacter" class="panic" hidden>
  <img src="../../resources/panicPoint.png" class="panicImg" draggable="false">
  <div class="speechBubble"><p>Psst! Try the hint button!</p></div>
</div>
</div>
</body>
</html>

//---File resources\BaseJs.js
const Deck= {
  list: (str) => {
    const res = [];
    for (let i= 0; true; i++) {
      const elem = document.getElementById(str + i);
      if (!elem) { return res; }
      res.push(elem);
      }
    },
  hideAll: (str) => Deck.list(str).forEach(c=>c.hidden = true),
  };
const MetaData= {
  str: (t, str) => {
    Utils.check(str === str.toLowerCase(),
      "metadata can not be case sensitive");
    return t.dataset[str];//.replace(/\\n/g, '\n');
    },
  int: (t, str) => parseInt(MetaData.str(t,str), 10),         
  };
const Log= {
  _currentStack: [],  // Safe for sync code due to JS single-threading
  tag: (name, fn) => (...args) => {
    Log._currentStack.push(name);
    try { return fn(...args); }
    finally { Log._currentStack.pop(); }
    },
  tagAsync: (name, fn) => (...args) => {
    if (Log._currentStack.length > 0){throw new Error(
      `Async handler "${name}" started with non-empty stack:
      [${Log._currentStack.join('->')}].
      This suggests a bug in the tag/tagAsync system.`);}
    Log._currentStack = [name];
    try { return fn(...args); }
    finally { Log._currentStack = []; }
    },
  log: (cond, msg) => {
    if (msg===undefined){ return Log.log(true,cond); }
    if (!cond){ return; }
    console.log(`${msg}\nTagStack: [${Log._currentStack.join('->')}]\n`);
    },
  };
const Utils= {
  error:(text) =>{
    alert(text);
    throw new Error(text);
    },
  checkExists:(value)=>{
    const err= value === null || value === undefined || Number.isNaN(value);
    if(!err){ return value; }
    Utils.error("Value does not exists");
    },
  check:(cond,text) =>{ if(!cond){ Utils.error(text); } },
  normalize: (text) => (' ' + text + ' ')
    .replace(/\s+(?=[^a-zA-Z0-9])/g, '') // Remove spaces before symbols
    .replace(/(?<=[^a-zA-Z0-9])\s+/g, '') // Remove spaces after symbols
    .replace(/\s+/g, ' ') // Collapse remaining spaces
    .trim(),
  
  showMessageBox: (message, timeOut, requireClick, freezeToken, callback) => {
    if (!timeOut){ timeOut= 1000; }
    const messageBox = document.getElementById('gameMessage');
    Utils.check(messageBox,"missing message box");
    messageBox.innerHTML = message;
    messageBox.style.display = 'block';
    const autoMsg= requireClick !== true;
    const t= freezeToken();
    const endMsg = Log.tag('MessageBoxCallBack', () => {
        messageBox.style.display = 'none';
        t.unfreeze();
        if (callback){ callback(); }
    });
    const timeOutF=autoMsg ? endMsg : ()=>messageBox.addEventListener('click', endMsg, { once: true });
    setTimeout(timeOutF, timeOut);
  },  
  flashGreen:()=> {
    const overlay = document.getElementById('screenOverlay').style;
    overlay.transition = 'none';
    overlay.backgroundColor = 'rgba(0,255,0,0.7)';
    void overlay.offsetWidth;
    overlay.animation = 'flashEffect 2s ease-out';
    }, 
  showNextLevelButton: (target, innerHTML, onClick ) => {
    if (!target){ return; }//Most times we want to show it and keep it shown
    setTimeout(Utils.flashGreen, 1500);
    const buttonContainer = document.createElement('div');
    buttonContainer.classList.add('roundBtn', 'nextLevelButton');
    const button = document.createElement('button');
    button.innerHTML = innerHTML;
    button.addEventListener('click', onClick);
    buttonContainer.appendChild(button);
    target.replaceWith(buttonContainer);
    return buttonContainer;
    },
  };
const initButtons = (updateContent,buttonActions) => {
  const freezeButtons = new Set();
  const freezeToken = () => {
    const token = {};
    freezeButtons.add(token);
    return { unfreeze: () => freezeButtons.delete(token) };
    };
  const freezeFor = time => {
    const token = {};
    freezeButtons.add(token);
    setTimeout(() => freezeButtons.delete(token), time);
    };
  const isFrozen = () => freezeButtons.size !== 0;
  document.querySelectorAll('button').forEach(button => {
  const bid = button.id;
  if (!bid){ return; }
  const action = buttonActions[bid];
  if (!action) {
    const txt= `No action defined for button with id: ${bid}`;
    alert(txt); throw new Error(txt);
    }
  button.addEventListener('click', ()=>{
      if (freezeButtons.size !== 0){ return; }
      action();
      updateContent();
      });
    });
  return {
    freezeFor:freezeFor,
    freezeToken: freezeToken,
    isFrozen: isFrozen,
    };
  };
const inactiveNudge= (isFrozenFun,initTime,initCallback) => {
  let timeoutId= null;
  let timeLimit= initTime;
  let onInactiveCallback= initCallback;
  const callback= ()=>{
    if(isFrozenFun()){ return; }
    onInactiveCallback();
    resetTimer();
    };
  const resetTimer= () => {
    if (timeoutId){ clearTimeout(timeoutId); }
    timeoutId = setTimeout(callback, timeLimit);
    };
  const startListening= () => {
    document.addEventListener("keydown", resetTimer, true);
    document.addEventListener("mousedown", resetTimer, true);
    document.addEventListener("touchstart", resetTimer, true);
    document.addEventListener("wheel", resetTimer, true);
    resetTimer();
    };
  startListening();
  return {
    setTimeLimit:(ms) => { timeLimit = ms; resetTimer(); },
    onInactive:(callback) => { onInactiveCallback = callback; },
    start: () => startListening(),
    stop: () => {
      clearTimeout(timeoutId);
      document.removeEventListener("keydown", resetTimer, true);
      document.removeEventListener("mousedown", resetTimer, true);
      document.removeEventListener("touchstart", resetTimer, true);
      document.removeEventListener("wheel", resetTimer, true);
      }
    };
  };
  
setTimeout(() => document.getElementById('screenOverlay')
  .style.opacity = '0', 0);
/*  (()=>{//old overkill, remember why
const overlay = document.getElementById('screenOverlay');
    setTimeout(() => { 
      overlay.style.opacity = '0';      
      setTimeout(() => overlay.style.opacity = '0', 3000);
        }, 0);
    })();
*/


//---File resources\BaseStyle.css
* {
  margin: 0;
  padding: 0;
  border: 0;
  overflow: hidden;
  letter-spacing: inherit;
  word-spacing: inherit;
  font-size: inherit;
  font-weight: inherit;
  font-variant-ligatures: inherit;
  font-kerning: inherit;
  font-family: inherit;
  -webkit-font-smoothing: inherit;
  text-rendering: inherit;
  text-rendering: inherit;
  line-height: inherit;
  box-sizing: border-box;  
}
body {
  background-color: rgb(100, 100, 100);
  display: flex;
  justify-content: center;
  align-items: center;
}
.gameArea {
  --effective-width: min(100vw, 210vh);
  width: var(--effective-width);
  aspect-ratio: 2.1;
  position: relative;
  background-color: rgb(110, 110, 110);
  font-size: calc(var(--effective-width) * 0.03);
  font-family: 'Roboto', Arial, sans-serif;
  line-height: 1.2;
  letter-spacing: 0.03em;
  word-spacing: 0.1em;
  text-rendering: geometricPrecision;
  font-weight: 700;
  font-variant-ligatures: none;
  font-kerning: normal;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}


small{
  font-size: 0.5ex;
  display: inline-block;
  vertical-align: middle;
  line-height: normal;
  }
.img_16_9 {
  width: 100%;
  aspect-ratio: 16 / 9;
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  }
.itemColumn {
  float: right;
  width: 15%;
  font-size: 1ex;
  padding-top: 5ex;
  overflow: visible;
  }
.contentItem {
  float: left;
  width: 85%;
  position: relative;
  }  
.messageBox {
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  position: absolute;
  top: 50%;
  left: 30%;
  transform: translate(-40%, -50%);
  background-color: rgba(10, 40, 40, 1);
  color: white;
  padding: 1ex;
  border-radius: 0.5ex;
  font-size: 1.2ex;
  text-align: center;
  white-space: normal;
  border: 0.2ex solid rgba(55, 255, 255, 1);
  box-shadow: 0ex 0ex 5ex rgba(255, 255, 255, 0.6);
  z-index: 5;
  }
.messageBox ul {
  margin: 1ex 0 0 1.5ex;
  padding: 0;
  list-style: disc;
  }
.messageBox hr {
  border: none;
  border-top: 1ex solid #ccc;
  margin: 1ex 0;
  }
.messageBox hr ~ * {
  opacity: 0;
  animation: fadeInAfterHR 1s forwards;
  animation-delay: 1.1s;
  }
@keyframes fadeInAfterHR {
  from { opacity: 0; }
  to { opacity: 1; }
  }

.overlayTextarea {
  font-size: 1.1ex;
  position: absolute;
  resize: none;
  border: 0.25ex solid rgb(170,170,170);
  padding: 0.45ex;
  line-height: 1.4;
  outline: none;
  color: rgb(5, 5, 5);
  overflow: hidden;
  white-space: pre;
  background: rgb(241, 231, 211);
  }

[hidden] {
  display: none;
  pointer-events: none;
  opacity: 0;
}

/* Initial black screen */
#screenOverlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  opacity: 1;
  z-index: 10;
  transition: opacity 6s ease-out;
  pointer-events: none;
  }
@keyframes flashEffect {
  0% { opacity: 0; }
  10% { opacity: 1; }
  100% { opacity: 0; }
  }

.panic {
  overflow: visible;
  position: absolute;
  bottom: 55%;
  left: 80%;
  width: 15%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  text-align: center;
  /*pointer-events: none; for now*/
}
.panicImg { width: 100%; }
.speechBubble {
  position: absolute;
  top: 90%;
  left: -25%;
  background-color: rgba(250, 250, 210, 1);
  color: black;
  padding: 0.5ex 1ex;
  border-radius: 5ex;
  box-shadow: 0ex 0ex 2ex 1ex rgba(20, 20, 0, 0.8);
  
  font-size: 0.7ex;
  font-weight: bold;
  text-align: center;
  white-space: nowrap;
}

//---File resources\RoundButtonsStyle.css
.roundBtn, .roundBtn button, .buttonContainer{
  position: relative;
  overflow: visible;
  text-align: center;
  align-items: center;
  color: white;
  justify-content: center;
  }

.roundBtn button {
  background-image: radial-gradient(circle, rgba(150, 230, 150, 1) 20%, rgba(76, 175, 80, 1) 100%);
  border-radius: 50%;
  cursor: pointer;
  width: 3ex;
  height: 3ex;
  transition: transform 0.2s, box-shadow 0.3s;
  box-shadow: 0 1ex 1.5ex rgba(0, 0, 0, 0.3), 0 0.3ex 0.6ex rgba(0, 0, 0, 0.2);
  }
.roundBtn:not(.nextLevelButton):hover:not(:active)::after {  
  content: attr(data-tooltip);
  position: absolute;
  top: -3ex;
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(0, 0, 0, 1);
  padding: 0.2ex;
  border-radius: 0.3ex;
  white-space: nowrap;
  pointer-events: none;
  z-index: 3;
  animation: showTooltip 1s forwards;
}
@keyframes showTooltip {
  0% { opacity: 0; }
  50% { opacity: 0; }
  100% { opacity: 1; }
}
.roundBtn button:disabled, .roundBtn button:disabled:hover {
  background-image: radial-gradient(circle, rgba(210, 210, 210, 1) 20%, rgba(180, 180, 180, 1) 100%);
  cursor: not-allowed;
  box-shadow: 0 1ex 1.5ex rgba(0, 0, 0, 0.3), 0 0.3ex 0.6ex rgba(0, 0, 0, 0.2);
  transform: none;
}
.roundBtn button:hover {
  background-image: radial-gradient(circle, rgba(140, 210, 120, 1) 20%, rgba(69, 160, 73, 1) 100%);
  transform: translateY(-0.1ex);
  box-shadow: 0 1.5ex 2ex rgba(0, 0, 0, 0.4), 0 0.4ex 0.8ex rgba(0, 0, 0, 0.25);
}
.roundBtn button:active {
  background-image: radial-gradient(circle, rgba(100, 200, 100, 1) 20%, rgba(50, 150, 50, 1) 100%);
  box-shadow: 0 0.5ex 0.5ex rgba(0, 0, 0, 0.1);
  transform: translateY(0.1ex);
}
#resetBtn, #hintBtn {
  background-image: radial-gradient(circle, rgba(180, 200, 255, 1) 20%, rgba(102, 153, 255, 1) 100%);
}
#resetBtn:hover, #hintBtn:hover {
  background-image: radial-gradient(circle, rgba(170, 185, 250, 1) 20%, rgba(92, 138, 245, 1) 100%);
}
.buttonContainer {
  background-color: rgba(222, 184, 135, 1);
  border-radius: 2ex;
  padding: 0.5ex;
  box-shadow: 0 1.5ex 3ex rgba(0, 0, 0, 0.4);
  display: block;
  gap: 1ex;
  width: max-content;
  z-index: 2;
  }

@keyframes nextLevelGlow {
    0% { box-shadow: 0 0 4ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
   50% { box-shadow: 0 0 6ex rgba(0, 255, 0, 1), 0 0 5ex rgba(0, 255, 0, 0.9), 0 0 8ex rgba(0, 255, 0, 0.8); }
  100% { box-shadow: 0 0 4ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
  }  
.nextLevelButton {
  font-size: 6.5ex;
  width: 7ex;
  height: 2.01ex;
  }
.nextLevelButton button {
  background-image: radial-gradient(circle, rgba(255, 223, 186, 1) 20%, rgba(255, 204, 128, 1) 100%);
  animation: nextLevelGlow 0.7s infinite alternate;
  }
.nextLevelButton button:hover {
  background-image: radial-gradient(circle, rgba(255, 215, 170, 1) 20%, rgba(255, 194, 102, 1) 100%); /* Slightly darker gold for hover */
  }
.roundBtn { display: inline-block; }
.buttonContainer br {
  display: block;
  margin-bottom: 0.4em;
  }

//---File resources\directInstructions\DirectInstructions.css
@keyframes correctGlowA {
    0% { box-shadow: 0 0 3ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
   50% { box-shadow: 0 0 5ex rgba(0, 255, 0, 1), 0 0 5ex rgba(0, 255, 0, 0.9), 0 0 8ex rgba(0, 255, 0, 0.8); }
  100% { box-shadow: 0 0 3ex rgba(50, 255, 50, 1), 0 0 3ex rgba(50, 255, 50, 0.9), 0 0 5ex rgba(50, 255, 50, 0.8); }
  }
@keyframes incorrectGlowA {
    0% { box-shadow: 0 0 3ex rgba(255, 165, 50, 1), 0 0 3ex rgba(255, 140, 0, 0.9), 0 0 5ex rgba(255, 120, 0, 0.8); }
   50% { box-shadow: 0 0 5ex rgba(255, 140,  0, 1), 0 0 5ex rgba(255, 100, 0, 0.9), 0 0 8ex rgba(255,  80, 0, 0.8); }
  100% { box-shadow: 0 0 3ex rgba(255, 165, 50, 1), 0 0 3ex rgba(255, 140, 0, 0.9), 0 0 5ex rgba(255, 120, 0, 0.8); }
  }
.correctGlow { animation: correctGlowA 0.7s infinite alternate; }
.incorrectGlow { animation: incorrectGlowA 0.7s infinite alternate; }

.customMessage {
  color: rgb(255, 140, 0);
  font-weight: bold;
  }

//---File resources\directInstructions\DirectInstructions.js
const initSlides = () => {
  let currentIndex = 0;
  const prev = document.getElementById('prevBtn');
  const next = document.getElementById('nextBtn');
  const nextLevelUrl = MetaData.str(document.body,'next');
  const maxIndex = (() => {
  let i = 0; 
    while (true) {
      const ci = document.getElementById('content' + i++);
    if (ci === null){return i - 2;}
      }
  })();
  const allTextArea = i =>
    Array.from(
      document.getElementById('content' + i)
      .querySelectorAll('textarea')
      );
  const updateContent = () => {
    Deck.hideAll('content');
    document
      .getElementById('content' + currentIndex)
      .hidden = false;
    prev.disabled = (currentIndex === 0);
    next.disabled = (currentIndex === maxIndex);
    if (next.disabled){ Utils.showNextLevelButton(
      document.getElementById('endButtonPlaceholder'),
      '<span class="emoji">🎉</span>',
      () => window.location.href = nextLevelUrl
      );}
    };
  const getAlternativePairs= (t)=>{
    const altStr= MetaData.str(t, 'alternative');
    if (!altStr){ return []; }
    const parts= altStr.split('|###|').map(part => part.trim());
    const pairs= [];
    for (let i= 0; i < parts.length; i += 2) {
      const altSolution= Utils.normalize(Utils.checkExists(parts[i]));
      const altMessage=  Utils.checkExists(parts[i + 1]);
      pairs.push({ altSolution, altMessage });
      }
    return pairs;
    }
  const defaultMsg= "Complete all the text to continue!";
  const checkSolutionTA= (t)=>{
    const userInput = Utils.normalize(t.value);
    const solution = Utils.normalize(MetaData.str(t, 'solution'));
    const alts= getAlternativePairs(t);
    if (userInput === solution){ return ""; }
    for (const { altSolution, altMessage } of alts){
      if (userInput === altSolution){ return altMessage; }
      }
    return defaultMsg;
    }
  const checkSolution= () => allTextArea(currentIndex)
    .map(checkSolutionTA).filter(s=>s !== "");
  const prevBtn= () => { if (currentIndex > 0){ currentIndex--; } };
  const showMessageBox= (msg)=> Utils.showMessageBox(`
    <div>
    <p style="font-size: 2.5ex; text-align: center;">
    <strong>${msg}</strong>
    </p>
    <hr>
    <p>Game explanation:</p>
    <ul>
      <li>🖊️ Complete the text area with the needed content.</li>
      <li>⟳ You can reset the text area to the original content by pressing the blue ⟳ button.</li>
      <li>❓ You can see a solution hint via the ❓ button.</li>
      <li>🎉 At the end, you can go to the next level by pressing on the symbol <span class="emoji">🎉</span>.</li>
    </ul>
    <hr>
    <p>☑️ Click here to make this message disappear</p>
    </div>
    `,0,true,Buttons.freezeToken,()=>{});
  const msgClass=(e)=> e === defaultMsg ? "" : 'class="customMessage"'; 
  const nextBtn= () => {
    const errs= checkSolution();
    if (errs.length === 0){ 
      if (currentIndex < maxIndex){ currentIndex++; }
      return;
      }
    let msg = errs
      .map(e => `<span ${msgClass(e)}>${e}</span>`)
      .join("<br>");
    return showMessageBox(msg);
    };
  const resetBtn = () => {
    const textAreas = allTextArea(currentIndex);
    textAreas.forEach(t => t.value = MetaData.str(t, 'original'));
    };
  const hintBtn = () => {
    const tas= allTextArea(currentIndex);
    if (tas.length === 0) { return; }
    Buttons.freezeFor(2000);
    tas.forEach(t => {
      t.disabled = true;
      t.dataset.tempValue = t.value;
      t.value = '';
      t.style.backgroundColor = 'rgba(196, 179, 167, 1)';
      });
    setTimeout(() => tas.forEach(t =>{
      t.value = MetaData.str(t, 'solution');
      }), 100);
    setTimeout(() => tas.forEach(t => {
      t.value = t.dataset.tempValue;
      t.disabled = false;
      t.style.backgroundColor = '';
      }), 1550);
    };
  const textInit= t =>{
    t.value = MetaData.str(t, 'original');
    t.addEventListener('input', () => {
      t.classList.remove("correctGlow", "incorrectGlow");
      let msg= checkSolutionTA(t);
      if (msg === defaultMsg){ return; }
      if (msg === "") { t.classList.add("correctGlow"); return; }
      t.classList.add("incorrectGlow");
      });
    };  
  for (let i= 0; i <= maxIndex; i++){ allTextArea(i).forEach(textInit); }
  updateContent();
  const Buttons = initButtons(updateContent,{nextBtn,prevBtn,resetBtn,hintBtn});
  const InactiveNudge= inactiveNudge(Buttons.isFrozen,30000,()=>{
    const tas= allTextArea(currentIndex);
    if (tas.length === 0) { return; }
    const hintChar = document.getElementById("hintCharacter");
    const speechBubble = hintChar.querySelector(".speechBubble");
    speechBubble.textContent = nextHint();
    hintChar.hidden = false;
    setTimeout(() => hintChar.hidden = true, 8000);
    });
  let messageIndex = 0;
  const hintMessages = [
    "Psst! Try the hint button",
    "It isn’t cheating. Try hints",
    "No shame in using hints",
    "Use hint! It won’t bite",
    "Do learning -- not struggling",
    ];
  const nextHint= ()=>{
    const res= hintMessages[messageIndex];
    messageIndex = (messageIndex + 1) % hintMessages.length;
    return res;
    };
  document.querySelectorAll('img')//force img preloading
    .forEach(img =>img.offsetHeight);
  };
initSlides();

//---File resources\walking\GameOptions.js
/*export*/ const OptionExplanations = {
  1: '<span class="emoji">🏷️</span> a parameter',
  2: '<span class="emoji">🏃🏾</span> a method call',
  3: '<span class="emoji">📦</span> an object literal',
  4: '<span class="emoji">📝</span> a method declaration',
  5: '<span class="emoji">📒</span> a type declaration',
  6: '<span class="emoji">📒</span> a type',
  7: '<span class="emoji">💬</span> a comment',
  8: '<span class="emoji">⚠️</span> an error',
};
-------------------
As you can see, my formatting and coding style are quite peculiar.
I need that becuase I'm half blind and this style helps me to keep enough
code on screen so that I can reason about it.

Note how we only use percentage and ex, and we avoid px at all costs. This allows for the pages to be scalable.

Note how we consistenty use the html 'hidden' to make stuff appear and disappear.

As you can see, I"m also limiting my usage of Js to mostly fat arrows and FP style.
When suggesting more code, keep consitency with this style.

Style: only fat arrows, closure based objects, no use of 'this'.
Indentation: note the position of the closed curlies. This used to be called banner style.
if (cond){
  bbbb
  bbbb
  }//Yes: banner style
if (cond){
  bbbb
  bbbb
}//No: other style
Ifs: note how we often declare a const to store the condition with a descriptive name
That is:
--Bad version below:
const cond = ...;
if (cond){// If drop on slot:
  ..
  }//BAD CODE: using comment for describing behaviour
--Good version below:
const dropOnSlot = ...;
if (dropOnSlot){
  ..
  }//GOOD CODE: using variable name for describing behaviour
-----
note how we use curlies all of the times and we keep short ifs on one line (but with curlies)
We consistently add curlies on if-for-while bodies, but we omit any other kind of redundant curlies.

Compact code: always write the most compact and correct code possible.
For example, avoid code like "if (cond){ return true; } else { return false; }"

Normalized ifs:
  When possible, avoid if-else and favour if-return.
  To reduce indented parts of code, normalize the logic so that the
  if-return part is the shorter.

Normalized method form:
When possible, fit method bodies in one of those two cathegories:
- Simple delegation: this method can fit in one line
- guards,computation,result
  guards: at the start of the method we write a bunch of 'if-error' or 'if-return'
  to exclude cases where the code should not be called or the result is obvious.
  computation: this is the center part, here we can use some for/stream/while/loop
    however, keep it simple and delagate to another method if needed.
  result: this part computes the result using information produced in the computation.
    Note: it is perfectly fine to use early returns when more compact.
Use of spaces around '='.
We distinguish update "a = b" from initialization "a= b".
Thus,
const x= 3; //Good
const x = 3; //Bad: this is initialization
let x= 3;//Good, still initialization
if (cond){ x = 3; }//Good, this is update
----------------
Right now the green flash is used to notify the end of a level, but I'm not so happy with it.
I would like to have an image in the center, may be a character with a thumbs up and transparend background in
png format.
How would I do that? how would I add the character centered in the screen with size depending on the screen?
Ideally, the character should be inside the game area, so that we can size it using the game area aspect ratio
managing. I would like the character to be another html element that always exists but is visualized only on need,
like the end button is.
