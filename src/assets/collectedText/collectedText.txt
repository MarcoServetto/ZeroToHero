I'm making a browser based game to teach programming.
Here are the relevant files I have

//---File assets\level1\Level1.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fearless</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="../../resources/BaseStyle.css">
	<link rel="stylesheet" href="../../resources/RoundButtonsStyle.css">
    <link rel="stylesheet" href="../../resources/directInstructions/DirectInstructions.css">
	<script type="text/javascript" src="../../resources/BaseJs.js" defer></script>
    <script type="text/javascript" src="../../resources/directInstructions/DirectInstructions.js" defer></script>
</head>
<body data-next="../level2/Level2.html">
<div class="gameArea">
<div class="contentItem" id="content0">
<img class="img_16_9" src="Level1-01.jpg"/>

</div>
<div class="contentItem" id="content1">
<img class="img_16_9" src="Level1-02.jpg"/>

</div>
<div class="contentItem" id="content2">
<img class="img_16_9" src="Level1-03.jpg"/>

</div>
<div class="contentItem" id="content3">
<img class="img_16_9" src="Level1-04.jpg"/>

</div>
<div class="contentItem" id="content4">
<img class="img_16_9" src="Level1-05.jpg"/>

</div>
<div class="contentItem" id="content5">
<img class="img_16_9" src="Level1-06.jpg"/>

</div>
<div class="contentItem" id="content6">
<img class="img_16_9" src="Level1-07.jpg"/>

</div>
<div class="contentItem" id="content7">
<img class="img_16_9" src="Level1-08.jpg"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:3.00%;width:45.00%;height:15.00%;"
name="Question_7_0"
data-solution="Hear:{}"
data-original=""
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content8">
<img class="img_16_9" src="Level1-09.jpg"/>

</div>
<div class="contentItem" id="content9">
<img class="img_16_9" src="Level1-10.jpg"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:3.00%;width:45.00%;height:15.00%;"
name="Question_9_0"
data-solution="See:{}"
data-original=""
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content10">
<img class="img_16_9" src="Level1-11.jpg"/>
<textarea class="overlayTextarea"
style="top:33.00%;left:45.00%;width:53.00%;height:47.00%;"
name="Question_10_0"
data-solution="Sense:{}
See:Sense{}
Hear:Sense{}"
data-original="
See:{}
Hear:{}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content11">
<img class="img_16_9" src="Level1-12.jpg"/>

</div>
<div class="contentItem" id="content12">
<img class="img_16_9" src="Level1-13.jpg"/>

</div>
<div class="contentItem" id="content13">
<img class="img_16_9" src="Level1-14.jpg"/>

</div>
<div class="contentItem" id="content14">
<img class="img_16_9" src="Level1-15.jpg"/>

</div>
<div class="contentItem" id="content15">
<img class="img_16_9" src="Level1-16.jpg"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:1.00%;width:45.00%;height:70.00%;"
name="Question_15_0"
data-solution="Sense:{}
See:Sense{}
Hear:Sense{}
North:{}"
data-original="Sense:{}
See:Sense{}
Hear:Sense{}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content16">
<img class="img_16_9" src="Level1-17.jpg"/>

</div>
<div class="contentItem" id="content17">
<img class="img_16_9" src="Level1-18.jpg"/>

</div>
<div class="contentItem" id="content18">
<img class="img_16_9" src="Level1-19.jpg"/>

</div>
<div class="contentItem" id="content19">
<img class="img_16_9" src="Level1-20.jpg"/>

</div>
<div class="contentItem" id="content20">
<img class="img_16_9" src="Level1-21.jpg"/>
<textarea class="overlayTextarea"
style="top:15.00%;left:1.00%;width:45.00%;height:70.00%;"
name="Question_20_0"
data-solution="Sense:{}
See:Sense{}
Hear:Sense{}

North:{}
East:{}
West:{}
South:{}"
data-original="Sense:{}
See:Sense{}
Hear:Sense{}
North:{}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content21">
<img class="img_16_9" src="Level1-22.jpg"/>

</div>
<div class="contentItem" id="content22">
<img class="img_16_9" src="Level1-23.jpg"/>
<textarea class="overlayTextarea"
style="top:2.00%;left:55.00%;width:43.00%;height:83.00%;"
name="Question_22_0"
data-solution="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{}
North:Direction{}
East:Direction{}
West:Direction{}
South:Direction{}"
data-original="Sense:{}
See:Sense{}
Hear:Sense{}

North:{}
East:{}
West:{}
South:{}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content23">
<img class="img_16_9" src="Level1-24.jpg"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_23_0"
data-solution="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{.turn:Direction,}
North:Direction{}
East:Direction{}
West:Direction{}
South:Direction{}"
data-original="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{}
North:Direction{}
East:Direction{}
West:Direction{}
South:Direction{}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content24">
<img class="img_16_9" src="Level1-25.jpg"/>

</div>
<div class="contentItem" id="content25">
<img class="img_16_9" src="Level1-26.jpg"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_25_0"
data-solution="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{.turn:Direction,}
North:Direction{.turn->East,}
East:Direction{}
West:Direction{}
South:Direction{}"
data-original="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{.turn:Direction,}
North:Direction{}
East:Direction{}
West:Direction{}
South:Direction{}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content26">
<img class="img_16_9" src="Level1-27.jpg"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_26_0"
data-solution="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{.turn:Direction,}
North:Direction{.turn->East,}
East:Direction{.turn->South,}
West:Direction{}
South:Direction{}"
data-original="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{.turn:Direction,}
North:Direction{.turn->East,}
East:Direction{}
West:Direction{}
South:Direction{}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content27">
<img class="img_16_9" src="Level1-28.jpg"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_27_0"
data-solution="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{.turn:Direction,}
North:Direction{.turn->East,}
East:Direction{.turn->South,}
West:Direction{}
South:Direction{.turn->West,}"
data-original="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{.turn:Direction,}
North:Direction{.turn->East,}
East:Direction{.turn->South,}
West:Direction{}
South:Direction{}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content28">
<img class="img_16_9" src="Level1-29.jpg"/>
<textarea class="overlayTextarea"
style="top:27.00%;left:1.00%;width:40.00%;height:58.00%;"
name="Question_28_0"
data-solution="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{.turn:Direction,}
North:Direction{.turn->East,}
East:Direction{.turn->South,}
West:Direction{.turn->North,}
South:Direction{.turn->West,}"
data-original="Sense:{}
See:Sense{}
Hear:Sense{}
Direction:{.turn:Direction,}
North:Direction{.turn->East,}
East:Direction{.turn->South,}
West:Direction{}
South:Direction{.turn->West,}"
autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off"></textarea>
</div>
<div class="contentItem" id="content29">
<img class="img_16_9" src="Level1-30.jpg"/>

</div>
<div class="contentItem" id="content30">
<img class="img_16_9" src="Level1-31.jpg"/>

</div>
<div class="itemColumn">	
  <div class="buttonContainer">
    <div class="roundBtn" data-tooltip="Go Back"><button id="prevBtn">«</button></div>
    <div class="roundBtn" data-tooltip="Reset and Hint"><button id="resetBtn">⟳</button></div>	
    <div class="roundBtn" data-tooltip="Next"><button id="nextBtn">»</button></div>
    </div>
  <div id="endButtonPlaceholder"></div>
  </div>
<div id="gameMessage" class="messageBox" style="display: none;"></div>
</div>
</body>
</html>

//---File assets\level2\Level2.html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Fearless</title>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="../../resources/BaseStyle.css">
  <link rel="stylesheet" href="../../resources/RoundButtonsStyle.css">
  <link rel="stylesheet" href="../../resources/walking/Walking.css">
  <script type="text/javascript" src="../../resources/BaseJs.js" defer></script>
  <script type="text/javascript" src="../../resources/walking/Question.js" defer></script>
  <script type="text/javascript" src="../../resources/walking/GameOptions.js" defer></script>
  <script type="text/javascript" src="../../resources/walking/Walking.js" defer></script>
</head>
<body data-required="33" data-next="../level3/Level3.html">
  <div class="gameArea">
    <div id="screenOverlay" class="screen-overlay"></div>
    <div class="top-section">

    <div class="top-left">
<textarea class="overlayTextarea"
    id="question0"
    name="Question_0"
    data-original="/*
This is the walking minigame
Select all the code and press 'comment'.
Indeed, this code is a multiline comment.
Text useful for explanation but
ignored in execution.
*/"
    data-red="167"
    data-selectionstart="0"
    data-selectionend="171"
    data-option="7"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly></textarea>
<textarea class="overlayTextarea"
    id="question1"
    name="Question_1"
    data-original="//This is a single line comment
"
    data-red="12"
    data-selectionstart="0"
    data-selectionend="31"
    data-option="7"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly></textarea>
<textarea class="overlayTextarea"
    id="question2"
    name="Question_2"
    data-original="North
"
    data-red="2"
    data-selectionstart="0"
    data-selectionend="5"
    data-option="3"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly></textarea>
<textarea class="overlayTextarea"
    id="question3"
    name="Question_3"
    data-original="+%/--%--"
    data-red="4"
    data-selectionstart="0"
    data-selectionend="8"
    data-option="8"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly></textarea>
<textarea class="overlayTextarea"
    id="question4"
    name="Question_4"
    data-original="//Text +%/--%-- outside of comments
Just press error :-)
"
    data-red="121"
    data-selectionstart="110"
    data-selectionend="130"
    data-option="8"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly></textarea>
<textarea class="overlayTextarea"
    id="question5"
    name="Question_5"
    data-original="//Ok, if you answer all correct, the
+%/--%--
"
    data-red="2"
    data-selectionstart="0"
    data-selectionend="36"
    data-option="7"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly></textarea>
<textarea class="overlayTextarea"
    id="question6"
    name="Question_6"
    data-original="//Why the question before was a
+%/--%--
"
    data-red="2"
    data-selectionstart="0"
    data-selectionend="31"
    data-option="7"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly></textarea>
<textarea class="overlayTextarea"
    id="question7"
    name="Question_7"
    data-original="//Ok, back to some questions.
East.turn
"
    data-red="59"
    data-selectionstart="55"
    data-selectionend="64"
    data-option="2"
    autocomplete="off" spellcheck="false" autocorrect="off" autocapitalize="off" readonly></textarea>
      </div>
    <div class="top-center">
	  <div class="button-row">
        <div class="roundBtn" data-tooltip="Parameter">
		  <button id="btnParameter"><span class="emoji">🏷️</span></button>
	      </div>
		<span>parameter</span>
		</div>
      <div class="button-row">
		<div class="roundBtn" data-tooltip="Method Call">
		  <button id="btnMethodCall"><span class="emoji">🏃🏾</span></button>
		  </div>
		<span>method call</span>
		</div>
	  <div class="button-row">
		<div class="roundBtn" data-tooltip="Object Literal">
		  <button id="btnObjectLiteral"><span class="emoji">📦</span></button>
		  </div>
		<span>object literal</span>
		</div>
	  <div class="button-row">
		<div class="roundBtn" data-tooltip="Method declaration">
		  <button id="btnMethodDeclaration"><span class="emoji">📝</span></button>
		  </div>
		<span>method declaration</span>
		</div>
      <div class="button-row">
		<div class="roundBtn" data-tooltip="Type declaration">
		  <button id="btnTypeDeclaration"><span class="emoji">📒</span></button>
		  </div>
		<span>type declaration</span>
		</div>
      <div class="button-row">
		<div class="roundBtn" data-tooltip="Type">
		  <button id="btnType"><span class="emoji">🧩</span></button>
		  </div>
		<span>type</span>
		</div>
	  <div class="button-row">
		<div class="roundBtn" data-tooltip="Comment">
		  <button id="btnComment"><span class="emoji">💬</span></button>
		  </div>
		<span>comment</span>
		</div>
      <div class="button-row">
		<div class="roundBtn" data-tooltip="Error">
		  <button id="btnError"><span class="emoji">⚠️</span></button>
		  </div>
		<span>error</span>
		</div>
      </div>

    <div class="top-right">
	  <div class="score-counter">
        <div class="score-display">0</div>
	  </div>
	  <div class="score-text">
		<p>current bonus: <span id="currentBonus">1</span></p>
        <p>current points: <span id="currentPoints">0</span></p>
        <p>required for next level: <span id="requiredPoints">25</span></p>
        </div>
      </div>
	  
	</div>
    <div class="scrolling-background">
      <div class="back-layer"></div>
      <div class="character"></div>
      <div class="small-character"></div>
      <div class="front-layer"></div>
    </div>
  <div id="gameMessage" class="messageBox" style="display: none;"></div>
  </div>
</body>
</html>

//---File resources\BaseJs.js
const Utils = {
  _currentStack: [],  // Safe for sync code due to JS single-threading
  tag: (name, fn) => (...args) => {
    Utils._currentStack.push(name);
    try { return fn(...args); }
    finally { Utils._currentStack.pop(); }
    },
  tagAsync: (name, fn) => (...args) => {
    if (Utils._currentStack.length > 0){throw new Error(
      `Async handler "${name}" started with non-empty stack:
      [${Utils._currentStack.join('->')}].
      This suggests a bug in the tag/tagAsync system.`);}
    Utils._currentStack = [name];
    try { return fn(...args); }
    finally { Utils._currentStack = []; }
    },
    log: (cond, msg) => {
      if (!cond) return;
      console.log(`${msg}\nTagStack: [${Utils._currentStack.join('->')}]\n`);
    },
  error:(text) =>{
    alert(text);
    throw new Error(text);
    },
  check:(cond,text) =>{ if(!cond){ Utils.error(text); } },
  normalize: (text) => (' ' + text + ' ')
	.replace(/\s+(?=[^a-zA-Z0-9])/g, '') // Remove spaces before symbols
	.replace(/(?<=[^a-zA-Z0-9])\s+/g, '') // Remove spaces after symbols
    .replace(/\s+/g, ' ') // Collapse remaining spaces
    .trim(),
  metaData: (t, str) => {
	Utils.check(str === str.toLowerCase(),
	  "metadata can not be case sensitive");
	return t.dataset[str].replace(/\\n/g, '\n');
    },
  metaDataInt: (t, str) => parseInt(Utils.metaData(t,str), 10), 
  
  showMessageBox: (message, timeOut, requireClick, Buttons, callback) => {
	  if (!timeOut){ timeOut= 1000; }
    const messageBox = document.getElementById('gameMessage');
	  Utils.check(messageBox,"missing message box");
    messageBox.innerHTML = message;
    messageBox.style.display = 'block';
    const autoMsg= requireClick !== true;
    const t= Buttons.freezeToken();
    /*const endMsg= () => {
      messageBox.style.display = 'none';
      t.unfreeze();      
      if (callback){ callback(); }
      };*/
    const endMsg = Utils.tag('MessageBoxCallBack', () => {
        messageBox.style.display = 'none';
        t.unfreeze();
        if (callback){ callback(); }
    });
    const timeOutF=autoMsg ? endMsg : ()=>messageBox.addEventListener('click', endMsg, { once: true });
    setTimeout(timeOutF, timeOut);
  },
  showNextLevelButton: (target, innerHTML, onClick ) => {
    if (!target){ return; }//Most times we want to show it and keep it shown
    const buttonContainer = document.createElement('div');
    buttonContainer.classList.add('roundBtn', 'next-level-button');
    const button = document.createElement('button');
    button.innerHTML = innerHTML;
    button.setAttribute('data-tooltip', 'Next Level');
    button.addEventListener('click', onClick);
    buttonContainer.appendChild(button);
    target.replaceWith(buttonContainer);
    return buttonContainer;
    },
  };

const initButtons = (updateContent,buttonActions) => {
  const freezeButtons = new Set();
  const freezeToken = () => {
    const token = {};
    freezeButtons.add(token);
    return { unfreeze: () => freezeButtons.delete(token) };
    };
  const freezeFor = time => {
    const token = {};
    freezeButtons.add(token);
    setTimeout(() => freezeButtons.delete(token), time);
    };
  const isFrozen = () => freezeButtons.size !== 0;
  document.querySelectorAll('button').forEach(button => {
	const bid = button.id;
	if (!bid){ return; }
	const action = buttonActions[bid];
	if (!action) {
	  const txt= `No action defined for button with id: ${bid}`;
	  alert(txt); throw new Error(txt);
	  }
	button.addEventListener('click', ()=>{
      if (freezeButtons.size !== 0){ return; }
      action();
      updateContent();
      });
    });
  return {
    freezeFor:freezeFor,
    freezeToken: freezeToken,
    isFrozen: isFrozen,
    };
  };

//---File resources\BaseStyle.css
* {
  margin: 0;
  padding: 0;
  border: 0;
  overflow: hidden;
  letter-spacing: inherit;
  word-spacing: inherit;
  font-size: inherit;
  font-weight: inherit;
  font-variant-ligatures: inherit;
  font-kerning: inherit;
  font-family: inherit;
  -webkit-font-smoothing: inherit;
  text-rendering: inherit;
  text-rendering: inherit;
  line-height: inherit;
  box-sizing: border-box;  
}
body {
  background-color: rgb(100, 100, 100);
  display: flex;
  justify-content: center;
  align-items: center;
}
.gameArea {
  --effective-width: min(100vw, 210vh);
  width: var(--effective-width);
  aspect-ratio: 2.1;
  position: relative;
  background-color: rgb(110, 110, 110);
  font-size: calc(var(--effective-width) * 0.03);
  font-family: 'Roboto', Arial, sans-serif;
  line-height: 1.2;
  letter-spacing: 0.03em;
  word-spacing: 0.1em;
  text-rendering: geometricPrecision;
  font-weight: 700;
  font-variant-ligatures: none;
  font-kerning: normal;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
}


small{
  font-size: 0.5ex;
  display: inline-block;
  vertical-align: middle;
  line-height: normal;
  }
.img_16_9 {
  width: min(100vw, 177.8vh);
  aspect-ratio: 16 / 9;
  object-fit: cover;
  }
.itemColumn {
  float: right;
  width: 15%;
  font-size: 1ex;
  padding-top: 5ex;
  overflow: visible;
  }
.contentItem {
  float: left;
  width: 85%;
  display: none;
  position: relative;
  }
.contentItem.active {
  display: block;
  }

  
.messageBox {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background-color: rgba(0, 0, 0, 0.8);
  color: white;
  padding: 1ex;
  border-radius: 0.5ex;
  font-size: 1.2ex;
  text-align: center;
  white-space: normal; /*white-space: pre-wrap;*/
  z-index: 5;
  }
.messageBox ul {
  margin: 1ex 0 0 1.5ex;
  padding: 0;
  list-style: disc;
  }
.messageBox hr {
  border: none;
  border-top: 1ex solid #ccc;
  margin: 1ex 0;
  }
 
.overlayTextarea {
  font-size: 1.1ex;
  position: absolute;
  resize: none;
  border: 0.25ex solid rgb(170,170,170);
  padding: 0.45ex;
  line-height: 1.4;
  outline: none;
  color: rgb(5, 5, 5);
  overflow: hidden;
  white-space: pre;
  background: rgb(241, 231, 211);
  }

//---File resources\RoundButtonsStyle.css
.roundBtn, .roundBtn button, .buttonContainer{
  position: relative;
  overflow: visible;
  text-align: center;
  align-items: center;
  color: white;
  justify-content: center;
}

.roundBtn button {
  background-image: radial-gradient(circle, rgba(150, 230, 150, 1) 20%, rgba(76, 175, 80, 1) 100%);
  border-radius: 50%;
  cursor: pointer;
  width: 3ex;
  height: 3ex;
  transition: transform 0.2s, box-shadow 0.3s;
  box-shadow: 0 1ex 1.5ex rgba(0, 0, 0, 0.3), 0 0.3ex 0.6ex rgba(0, 0, 0, 0.2);
}
.roundBtn:hover:not(:active)::after {	
  content: attr(data-tooltip);
  position: absolute;
  top: -3ex;
  left: 50%;
  transform: translateX(-50%);
  background-color: rgba(0, 0, 0, 1);
  padding: 0.2ex;
  border-radius: 0.3ex;
  white-space: nowrap;
  pointer-events: none;
  z-index: 3;
  animation: showTooltip 1s forwards;
}
@keyframes showTooltip {
  0% { opacity: 0; }
  50% { opacity: 0; }
  100% { opacity: 1; }
}
.roundBtn button:disabled, .roundBtn button:disabled:hover {
  background-image: radial-gradient(circle, rgba(210, 210, 210, 1) 20%, rgba(180, 180, 180, 1) 100%);
  cursor: not-allowed;
  box-shadow: 0 1ex 1.5ex rgba(0, 0, 0, 0.3), 0 0.3ex 0.6ex rgba(0, 0, 0, 0.2);
  transform: none;
}
.roundBtn button:hover {
  background-image: radial-gradient(circle, rgba(140, 210, 120, 1) 20%, rgba(69, 160, 73, 1) 100%);
  transform: translateY(-0.1ex);
  box-shadow: 0 1.5ex 2ex rgba(0, 0, 0, 0.4), 0 0.4ex 0.8ex rgba(0, 0, 0, 0.25);
}
.roundBtn button:active {
  background-image: radial-gradient(circle, rgba(100, 200, 100, 1) 20%, rgba(50, 150, 50, 1) 100%);
  box-shadow: 0 0.5ex 0.5ex rgba(0, 0, 0, 0.1);
  transform: translateY(0.1ex);
}
#resetBtn {
  background-image: radial-gradient(circle, rgba(180, 200, 255, 1) 20%, rgba(102, 153, 255, 1) 100%);
}
#resetBtn:hover {
  background-image: radial-gradient(circle, rgba(170, 185, 250, 1) 20%, rgba(92, 138, 245, 1) 100%);
}
.buttonContainer {
  background-color: rgba(222, 184, 135, 1);
  border-radius: 2ex;
  padding: 0.5ex;
  box-shadow: 0 1.5ex 3ex rgba(0, 0, 0, 0.4);
  display: flex;
  gap: 1ex;
  width: max-content;
}
.next-level-button {
  font-size: 6.5ex;
  width: 7ex;
  height: 2.01ex;
}
.next-level-button button {
  background-image: radial-gradient(circle, rgba(255, 223, 186, 1) 20%, rgba(255, 204, 128, 1) 100%); /* Glorious gold hues */
}
.next-level-button button:hover {
  background-image: radial-gradient(circle, rgba(255, 215, 170, 1) 20%, rgba(255, 194, 102, 1) 100%); /* Slightly darker gold for hover */
}

//---File resources\directInstructions\DirectInstructions.css

//---File resources\directInstructions\DirectInstructions.js
const initSlides = () => {
  let currentIndex = 0;
  const prev = document.getElementById('prevBtn');
  const next = document.getElementById('nextBtn');
  const nextLevelUrl = Utils.metaData(document.body,'next');
  const maxIndex = (() => {
	let i = 0; 
    while (true) {
      const ci = document.getElementById('content' + i++);
	  if (ci === null){return i - 2;}
      }
	})();
  const allTextArea = i =>
    Array.from(
      document.getElementById('content' + i)
	    .querySelectorAll('textarea')
      );
  const updateContent = () => {
    for (let i = 0; i <= maxIndex; i++) {
	  document.getElementById('content' + i).classList.remove('active');
      }
	document
	  .getElementById('content' + currentIndex)
	  .classList.add('active');
	prev.disabled = (currentIndex === 0);
	next.disabled = (currentIndex === maxIndex);
	if (next.disabled){ Utils.showNextLevelButton(
      document.getElementById('endButtonPlaceholder'),
	  '<span class="emoji">🎉</span>',
	  () => window.location.href = nextLevelUrl
	  );}
	};
  const checkSolution = () => allTextArea(currentIndex).every(t => {
	const userInput = Utils.normalize(t.value);
	const solution = Utils.normalize(Utils.metaData(t, 'solution'));
	return userInput === solution;
	});
  const prevBtn = () => { if (currentIndex > 0){ currentIndex--; } };
  const nextBtn = () => {
	if (!checkSolution()) { return Utils.showMessageBox(`
	  <div>
	    <p style="font-size: 2.5ex; text-align: center;"><strong>Complete all the text to continue!</strong></p>
	    <hr>
	    <p>Game explanation:</p>
	    <ul>
	      <li>🖊️ Complete the text area with the needed content.</li>
	      <li>⟳ You can reset the text area to the original content by pressing the blue ⟳ button.</li>
	      <li>✨ This also shows the solution for a moment!</li>
	      <li>🎉 At the end, you can go to the next level by pressing on the symbol <span class="emoji">🎉</span>.</li>
	    </ul>
		<hr>
		<p>☑️ Click here to make this message disappear</p>
	  </div>
      `,0,true,Buttons,()=>{}); }
	if (currentIndex < maxIndex){ currentIndex++; }
	};
  const resetBtn = () => {
    Buttons.freezeFor(1000);
	allTextArea(currentIndex).forEach(t0 => {
      t0.disabled = true;
      t0.value = '';
      t0.style.backgroundColor = 'rgba(196, 179, 167, 1)';
	  });
    setTimeout(() => allTextArea(currentIndex).forEach(t1 => 
	  t1.value = Utils.metaData(t1, 'solution')
	  ), 350);
    setTimeout(() => allTextArea(currentIndex).forEach(t2 => {
      t2.value = Utils.metaData(t2, 'original');
      t2.disabled = false;
      t2.style.backgroundColor = '';
      }), 750);
    };
  for (let i = 0; i <= maxIndex; i++) {
    allTextArea(i).forEach(t => t.value = Utils.metaData(t, 'original'));
    }
  updateContent();
  const Buttons = initButtons(updateContent,{nextBtn,prevBtn,resetBtn});
  };
initSlides();

//---File resources\walking\GameOptions.js
/*export*/ const OptionExplanations = {
  1: '<span class="emoji">🏷️</span> a parameter',
  2: '<span class="emoji">🏃🏾</span> a method call',
  3: '<span class="emoji">📦</span> an object literal',
  4: '<span class="emoji">📝</span> a method declaration',
  5: '<span class="emoji">📒</span> a type declaration',
  6: '<span class="emoji">📒</span> a type',
  7: '<span class="emoji">💬</span> a comment',
  8: '<span class="emoji">⚠️</span> an error',
};

//---File resources\walking\Question.js
/*export*/ const InitQuestions = (Buttons)=> _postInit(_InitQuestions(Buttons));

const _InitQuestions = (Buttons)=>{
  const res = [];
  for (let i= 0; true; i++) {
    const textarea = document.getElementById('question' + i);
    if (!textarea) { return res; }
    res.push(QuestionText(textarea,Buttons));
    }
  }
const _postInit = Utils.tagAsync('postInit', (Questions) => {
  setTimeout(()=>_postInit(Questions),100);
  Questions.forEach((q)=>q.keepFocus());
  return Questions;
  });
const QuestionText = (q,Buttons) => {
  const redChar= Utils.metaDataInt(q, 'red');
  const requiredOption= Utils.metaDataInt(q, 'option');
  const startOk= Utils.metaDataInt(q, 'selectionstart');
  const endOk= Utils.metaDataInt(q, 'selectionend');
  const originalText= Utils.metaData(q,'original');
  let startFix= redChar;
  let endFix= redChar + 1;
  const toSolution= ()=>{ startFix = startOk; endFix = endOk; };
  const toSingle= ()=>{ startFix = redChar; endFix = redChar + 1; };
  const isCorrectAnswer= (option)=>{
    const isErrorType= requiredOption === 8;
    const selectionOk= q.selectionStart === startOk && q.selectionEnd === endOk;
    return option === requiredOption && (isErrorType || selectionOk);
	};
  const active= Utils.tag('active',(flag)=>{
    if(!flag){ q.classList.remove('active'); return; }
    q.classList.add('active');
    q.value = originalText;
    toSingle();
    highlight();
  });
  const highlightRange= Utils.tag('highlightRange', (a, b)=>{
    Utils.log(true, `Highlighting range ${startFix}-${endFix}`);
    setTimeout(() => { q.focus(); q.setSelectionRange(a, b); }, 0);
    return false;
    });
  const highlight= ()=> highlightRange(startFix, endFix);
  const selectionEvent= ()=>{
    Utils.log(true,'selectionEvent for  '+q.id+' '+startFix+ '-'+endFix);
    if (Buttons.isFrozen()){ return highlight(); }
    const start= Number(q.selectionStart) || 0;
    const end= Number(q.selectionEnd) || 0;
    const included= start <= redChar && end > redChar;
    if (!included){ return highlight(); }
    Utils.log(true,'no highlight for  '+q.id+' '+startFix+ '-'+endFix+' -- '+start+' '+end);
    return highlightRange(start,end);
    };
  const keepFocus= Utils.tag('keepFocus',() => {
    if (!q.classList.contains('active')){ return; }
    if (document.activeElement === q){ return; }
    q.focus();
    selectionEvent();
    });
  const selectionEventMouse= Utils.tag('userEvent:mouseUp',selectionEvent);
  /*const selectionEventSelect= Utils.tag('userEvent:select',(e)=>{
    Utils.log(true, `Selection event isTrusted: ${e.isTrusted}`);
    selectionEvent();
  });*/
  q.addEventListener('mouseup', selectionEventMouse);
  q.addEventListener('keydown', (e) => e.preventDefault());
  return {
    toSolution,toSingle,isCorrectAnswer,active,
    keepFocus,selectionEvent,
    solved:false,requiredOption};
};

//---File resources\walking\Walking.js

document.addEventListener('DOMContentLoaded', () => {
  const nextQuestion = Utils.tag('nextQuestion', () => {
	if (streak === 0){streak = 1; }    
    const completed= questions.every(q => q.solved);
    if (completed){ questions.forEach(q => q.solved = false); }
    let i = (currentQuestionIndex + 1) % totalQuestions;
    while (questions[i].solved){ i = (i + 1) % totalQuestions; }
    currentQuestionIndex = i;
    questions.forEach(q => q.active(false));
    questions[currentQuestionIndex].active(true);
    updateContent();
    });
  const updateContent= Utils.tag('updateContent',() => {
    requiredPointsElem.textContent = requiredPoints;
    resetAnimationSpeed();
    });
  const speedUp= ()=>{ streak = streak + 1; };
  const resetAnimationSpeed= () => {
	const speed= streak>0?Math.pow(0.3981,streak):0;
    backLayer.style.animationDuration = (1000000 * speed + 's');
    frontLayer.style.animationDuration = (500000 * speed + 's');
    if (speed > 0){
      character.style.animationPlayState = 'running';
	  smallCharacter.style.animationPlayState = 'running';
	  character.style.animationDuration = ((1.5 + 50 * speed) + 's');
      smallCharacter.style.animationDuration = ((1.5 + 50 * speed) + 's');
	  }
	else {
	  character.style.animationPlayState = 'paused';
	  smallCharacter.style.animationPlayState = 'paused';
	  }
    };
  const showScoreAnimation= (increment) => {
    const incrementElem = document.createElement('span');
    incrementElem.classList.add('score-increment');
    incrementElem.textContent = `+${increment}`;
    const scoreCounter = document.querySelector('.score-counter');
    scoreCounter.appendChild(incrementElem);
    setTimeout(() => incrementElem.remove(), 3000);
    setTimeout(() => scoreDisplayElem.textContent = score,1000);
    setTimeout(() => {	  
      scoreDisplayElem.classList.add('animate-glow');
      setTimeout(() => scoreDisplayElem.classList.remove('animate-glow'), 3000);
      },500);
    };
  const showNextLevelButton= () => Utils.showNextLevelButton(
    document.querySelector('.score-text'),
    '<span class="emoji">🎉</span>',
    () => window.location.href = nextLevelUrl
    );
  const handleCorrectAnswer= (increment) => {
    score += increment;
    questions[currentQuestionIndex].solved = true;
    speedUp();
    currentBonusElem.textContent = increment;
    currentPointsElem.textContent = score;
    showScoreAnimation(increment);
    if (score >= requiredPoints){ showNextLevelButton(); }
    };
  const handleIncorrectAnswer= Utils.tag('handleIncorrectAnswer', (currentQuestion) => {
    streak = 0;
    currentBonusElem.textContent = 1;
    currentQuestion.toSolution();
    currentQuestion.selectionEvent();
    Buttons.freezeFor(4050);
    displayExplanationMessage(currentQuestion.requiredOption);
    });
  const displayExplanationMessage = (requiredOption) => {
    const explanation = OptionExplanations[requiredOption] || Utils.error('bad button id '+requiredOption);
    const msg =`
	  <div>
	    <p><strong>You stumble and fall.</strong></p>
		<p>See the text currently selected.</p>
		<p>The right button was "<strong>${explanation}</strong>".</p>
		<hr>
	    <p>Minigame explanation:</p>
	    <ul>
	      <li>👀Look for the character selected in the code.</li>
	      <li>🖱️Select the smallest cohesive amount of code around that character.</li>
	      <li>☑️Click on the button corresponding to the kind of text you selected.</li>
	      <li>🚨There is an error around the selected character? Just press "Error".</li>
		  <li>🎲This puzzle is all about learning patterns via trial and error.</li>
	    </ul>
		<hr>
		<p>☑️ Click here to make this message disappear</p>
		<p>🎉 At the end, you can go to the next level by pressing on the symbol <span class="emoji">🎉</span>.</p>
	  </div>
	  `;
    Utils.showMessageBox(msg, 4000, true, Buttons, nextQuestion);
    };	
  const handleButtonClick = Utils.tag('handleButtonClick', (option) => {
    Buttons.freezeFor(500);
    const currentQuestion = questions[currentQuestionIndex];
    const nope= !currentQuestion.isCorrectAnswer(option);
    if (nope){ handleIncorrectAnswer(currentQuestion); return; }
    const increment = Math.pow(2, streak - 1);
    handleCorrectAnswer(increment);
    nextQuestion();
    });
  const buttonActions = {
    btnParameter: () => handleButtonClick(1),
    btnMethodCall: () => handleButtonClick(2),
    btnObjectLiteral: () => handleButtonClick(3),
    btnMethodDeclaration: () => handleButtonClick(4),
    btnTypeDeclaration: () => handleButtonClick(5),
    btnType: () => handleButtonClick(6),
    btnComment: () => handleButtonClick(7),
    btnError: () => handleButtonClick(8),
  };
  const overlay = document.getElementById('screenOverlay');
  setTimeout(() => { 
	overlay.style.opacity = '0';      
    setTimeout(() => overlay.remove(), 3000);
    }, 0);
  let currentQuestionIndex= 0;
  let score= 0;
  let streak= 1;
  const Buttons= initButtons(updateContent, buttonActions);
  Buttons.freezeFor(1500);
  const questions= InitQuestions(Buttons);
  const totalQuestions= questions.length;
  const currentPointsElem= document.getElementById('currentPoints');
  const currentBonusElem= document.getElementById('currentBonus');
  const requiredPoints= Utils.metaDataInt(document.body,'required');
  const nextLevelUrl= Utils.metaData(document.body,'next');
  const requiredPointsElem= document.getElementById('requiredPoints');
  const scoreDisplayElem= document.querySelector('.score-display');
  const backLayer= document.querySelector('.back-layer');
  const frontLayer= document.querySelector('.front-layer');
  const character = document.querySelector('.character');
  const smallCharacter = document.querySelector('.small-character');
  questions.forEach(q => q.active(false));
  questions[currentQuestionIndex].active(true);
  updateContent();
  const animationTxt= 'scrollFrontBackground 1s linear infinite';
  window.addEventListener('resize', () => {
    backLayer.style.animation = 'none';
    frontLayer.style.animation = 'none';
    void backLayer.offsetWidth;
    void frontLayer.offsetWidth;
    backLayer.style.animation = animationTxt;
    frontLayer.style.animation = animationTxt;
    resetAnimationSpeed();
  });
});

//---File resources\walking\Walking.css
.top-section {
  position: relative;
  width: 100%;
  height: 59.99%;
  background-color: rgb(100, 100, 100);
}
.top-left {
  position: absolute;
  top: 0;
  left: 0;
  width: 50%;
  height: 100%;
  padding: 2ex;
}
.top-center {
  position: absolute;
  top: 0;
  left: 50%;
  width: 25%;
  height: 100%;
  padding: 2ex;
  display: flex;
  flex-direction: column;
  justify-content: center;
  font-size: 0.8ex;
  overflow: visible;
}
.top-right {
  position: absolute;
  top: 0;
  right: 0;
  width: 25%;
  height: 100%;
  padding: 2ex;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  font-size: 0.8ex;
}

.scrolling-background {
  width: 100%;
  height: 40%;
  position: relative;
  overflow: hidden;
}
.back-layer {
  width: 100%;
  height: 100%;
  background-image: url('back1.png');
  background-repeat: repeat-x;
  background-size: auto 100%;
  animation: scrollBackground 43200s linear infinite;
}
.character {
  width: 5ex;
  height: 10ex;
  background-image: url('side1.png');
  background-size: contain;
  background-repeat: no-repeat;
  position: absolute;
  bottom: -10%;
  left: 50%;
  transform: translate(-50%, 0);
  animation: characterMovement 30s cubic-bezier(0.42, 0, 0.58, 1) infinite alternate;
  z-index: 2;
}
.small-character {
  width: 5ex;
  height: 10ex;
  background-image: url('side2.png');
  background-size: contain;
  background-repeat: no-repeat;
  position: absolute;
  bottom: -25%;
  left: 60%;
  transform: translate(-50%, 0);
  animation: smallCharacterMovement 35s cubic-bezier(0.42, 0, 0.58, 1) infinite alternate;
  z-index: 2;
}
.front-layer {
  width: 100%;
  height: 100%;
  background-image: url('front1.png');
  background-repeat: repeat-x;
  background-size: auto 100%;
  position: absolute;
  top: 0;
  left: 0;
  animation: scrollFrontBackground 86400s linear infinite;
  z-index: 3;
}

@keyframes scrollBackground {
  from { background-position: 0 0; }
  to { background-position: -100000ex 0; }
}

@keyframes scrollFrontBackground {
  from { background-position: 0 0; }
  to { background-position: -500000ex 0; }
}

@keyframes characterMovement {
    0% { transform: translate(-50%,    0); }
   10% { transform: translate(-70%,  -3%); }
   20% { transform: translate(-40%,   5%); }
   30% { transform: translate(-75%,  -8%); }
   40% { transform: translate(-30%,  10%); }
   50% { transform: translate(-55%,    0); }
   60% { transform: translate(-80%,  -5%); }
   70% { transform: translate(-45%,   8%); }
   80% { transform: translate(-60%,   3%); }
   90% { transform: translate(-50%, -10%); }
  100% { transform: translate(-50%,    0); }
}

@keyframes smallCharacterMovement {
    0% { transform: translate(-50%,    0); }
   10% { transform: translate(-30%,   2%); }
   20% { transform: translate(-25%,  -4%); }
   30% { transform: translate(-70%,   6%); }
   40% { transform: translate(-40%,  -8%); }
   50% { transform: translate(-65%,    0); }
   60% { transform: translate(-35%,  10%); }
   70% { transform: translate(-55%,  -5%); }
   80% { transform: translate(-60%,   8%); }
   90% { transform: translate(-50%,  -6%); }
  100% { transform: translate(-50%,    0); }
}

.overlayTextarea { display: none; }
.overlayTextarea.active { display: block; }

.button-row {
  display: flex;
  align-items: center;
  margin-bottom: 1ex;
  overflow: visible;
}

.button-row button {
  margin-right: 1ex;
  font-size: 2.2ex;
}
.top-left .overlayTextarea {
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.roundBtn button .emoji{ filter: brightness(0.75) contrast(2.5); }

.roundBtn button {
  background-image: radial-gradient(circle, rgba(200, 180, 160, 1) 20%, rgba(230, 150, 100, 1) 100%);
}
.roundBtn button:hover {
  background-image: radial-gradient(circle, rgba(190, 170, 150, 1) 20%, rgba(220, 140, 90, 1) 100%);
}

.score-counter {
  position: relative;
  width: 15ex;
  height: 15ex;
  border-radius: 50%;
  background-color: rgb(200, 200, 200);
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 2ex;
  overflow: visible;
}
.score-text p {
  margin: 0.5ex 0;
  font-size: 1.5ex;
}
.score-display {
  font-size: 5ex;
  font-weight: bold;
  padding: 0 0.5ex;
  border-radius: 3ex;
}
.score-display.score-increase {
  transform: scale(1.5);
  transition: transform 0.5s;
}
@keyframes scoreGlow {
    0% { transform: scale(1);   
		 box-shadow: 0 0 1ex rgba(255, 215, 0, 0.5); background-color:rgba(255, 215, 0, 0.2); }
   50% { transform: scale(1.5);
	     box-shadow: 0 0 2ex rgba(255, 215, 0, 1  ); background-color:rgba(255, 215, 0, 0.5  ); }
  100% { transform: scale(1);
	     box-shadow: 0 0 1ex rgba(255, 215, 0, 0.5); background-color:rgba(255, 215, 0, 0.2); }
}
@keyframes floatUp {
    0% { opacity: 1; transform: translateY(    0) scale(1  ); }
  100% { opacity: 0; transform: translateY(-50px) scale(1.5); }
}

.score-display.animate-glow { animation: scoreGlow 3s ease-out; }

.score-increment {
  position: absolute;
  top: 0;
  left: 50%;
  transform: translate(-50%, 0) scale(1);
  font-size: 3ex;
  color: rgb(245, 205, 0);
  pointer-events: none;
  animation: floatUp 3s forwards, growIncrement 3s ease-in-out;
  opacity: 0;
}
@keyframes growIncrement {
    0% { transform: translate(-50%,     0) scale(1  ); }
   50% { transform: translate(-50%, -20px) scale(2  ); }
  100% { transform: translate(-50%, -50px) scale(1.5); }
}
@keyframes floatUp {
    0% { opacity: 1; transform: translate(-50%,     0) scale(1.5); }
  100% { opacity: 0; transform: translate(-50%, -50px) scale(1.5); }
}
/* Initial black screen */
.screen-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  opacity: 1;
  z-index: 10;
  transition: opacity 3s ease-out;
  pointer-events: none;
}
-------------------
As you can see, my formatting and coding style are quite peculiar.
I need that becuase I'm half blind and this style helps me to keep enough
code on screen so that I can reason about it.
As you can see, I"m also limiting my usage of Js to mostly fat arrows and FP style.
When suggesting more code, keep consitency with this style.
